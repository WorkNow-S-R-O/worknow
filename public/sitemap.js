import fs from 'fs';
import { PrismaClient } from '@prisma/client';
import path from 'path';

const prisma = new PrismaClient();
const baseUrl = 'https://worknowjob.com';
const maxUrlsPerSitemap = 10000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ

const generateSitemap = async () => {
  try {
    console.log("üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Sitemap...");

    const jobs = await prisma.job.findMany({ orderBy: { createdAt: 'desc' }, take: maxUrlsPerSitemap });
    const users = await prisma.user.findMany({ take: maxUrlsPerSitemap });
    
    const sitemapIndex = [];
    let sitemapCount = 1;
    let urlCount = 0;
    
    let sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n`;

    // üìå –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–∞–ø–∫–∞ public, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞–µ–º
    const publicPath = path.join(process.cwd(), 'public');
    if (!fs.existsSync(publicPath)) {
      fs.mkdirSync(publicPath);
      console.log("üìÇ –ü–∞–ø–∫–∞ 'public/' —Å–æ–∑–¥–∞–Ω–∞");
    }

    // ‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    sitemapContent += `<url>\n<loc>${baseUrl}/</loc>\n<lastmod>${new Date().toISOString().split('T')[0]}</lastmod>\n<priority>1.0</priority>\n</url>\n`;

    // ‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    sitemapContent += `<url>\n<loc>${baseUrl}/jobs</loc>\n<lastmod>${new Date().toISOString().split('T')[0]}</lastmod>\n<priority>0.9</priority>\n</url>\n`;

    urlCount += 2;

    // ‚úÖ –í–∞–∫–∞–Ω—Å–∏–∏
    for (const job of jobs) {
      if (!job.id) continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–æ—Ö–∏–µ –¥–∞–Ω–Ω—ã–µ

      if (urlCount >= maxUrlsPerSitemap) {
        fs.writeFileSync(`public/sitemap${sitemapCount}.xml`, sitemapContent + '</urlset>\n');
        sitemapIndex.push(`${baseUrl}/sitemap${sitemapCount}.xml`);
        sitemapCount++;
        sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n`;
        urlCount = 0;
      }

      const lastModDate = job.updatedAt ? new Date(job.updatedAt).toISOString().split('T')[0] : new Date(job.createdAt || Date.now()).toISOString().split('T')[0];

      sitemapContent += `<url>\n<loc>${baseUrl}/jobs/${job.id}</loc>\n<lastmod>${lastModDate}</lastmod>\n<priority>0.8</priority>\n</url>\n`;
      urlCount++;
    }

    // ‚úÖ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—É–±–∏—Ä–∞–µ–º user_)
    for (const user of users) {
      if (!user.clerkUserId || user.clerkUserId.startsWith("user_")) continue;

      if (urlCount >= maxUrlsPerSitemap) {
        fs.writeFileSync(`public/sitemap${sitemapCount}.xml`, sitemapContent + '</urlset>\n');
        sitemapIndex.push(`${baseUrl}/sitemap${sitemapCount}.xml`);
        sitemapCount++;
        sitemapContent = `<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n`;
        urlCount = 0;
      }

      sitemapContent += `<url>\n<loc>${baseUrl}/profile/${user.clerkUserId}</loc>\n<priority>0.6</priority>\n</url>\n`;
      urlCount++;
    }

    // ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π `sitemapX.xml`
    if (urlCount > 0) {
      sitemapContent += '</urlset>\n';
      fs.writeFileSync(`public/sitemap${sitemapCount}.xml`, sitemapContent);
      sitemapIndex.push(`${baseUrl}/sitemap${sitemapCount}.xml`);
    }

    // ‚úÖ –°–æ–∑–¥–∞–µ–º `sitemap-index.xml`
    let sitemapIndexContent = `<?xml version="1.0" encoding="UTF-8"?>\n<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n`;
    for (const sitemap of sitemapIndex) {
      sitemapIndexContent += `<sitemap>\n<loc>${sitemap}</loc>\n<lastmod>${new Date().toISOString().split('T')[0]}</lastmod>\n</sitemap>\n`;
    }
    sitemapIndexContent += '</sitemapindex>\n';
    fs.writeFileSync(`public/sitemap-index.xml`, sitemapIndexContent);

    console.log(`‚úÖ Sitemap –≥–æ—Ç–æ–≤: ${sitemapIndex.length} —Ñ–∞–π–ª–æ–≤.`);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Sitemap:", error);
  }
};

// üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Sitemap
generateSitemap();
