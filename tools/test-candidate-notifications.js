import { PrismaClient } from '@prisma/client';
import { sendNewCandidatesNotification, sendSingleCandidateNotification } from '../apps/api/services/notificationService.js';

const prisma = new PrismaClient();

// Test data for new candidates
const testCandidates = [
  {
    name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
    city: '–¢–µ–ª—å-–ê–≤–∏–≤',
    description: '–ò—â—É —Ä–∞–±–æ—Ç—É –Ω—è–Ω–µ–π —Å –æ–ø—ã—Ç–æ–º 5 –ª–µ—Ç. –õ—é–±–ª—é –¥–µ—Ç–µ–π, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è, –ø—É–Ω–∫—Ç—É–∞–ª—å–Ω–∞—è.',
    category: '–Ω—è–Ω–∏',
    employment: '–ø–æ–ª–Ω–∞—è',
    languages: ['—Ä—É—Å—Å–∫–∏–π', '–∏–≤—Ä–∏—Ç'],
    isDemanded: true,
    contact: '050-123-4567',
    gender: '–∂–µ–Ω—â–∏–Ω–∞',
    nativeLanguage: '—Ä—É—Å—Å–∫–∏–π',
    documents: '–¢–µ—É–¥–∞—Ç –ó–µ—É—Ç',
    announcement: '–û–ø—ã—Ç–Ω–∞—è –Ω—è–Ω—è –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É',
    note: '–ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –¥–µ—Ç—å–º–∏ –æ—Ç 1 –≥–æ–¥–∞',
    documentType: '–¢–µ—É–¥–∞—Ç –ó–µ—É—Ç'
  },
  {
    name: '–ú–∏—Ö–∞–∏–ª –ö–æ–∑–ª–æ–≤',
    city: '–•–∞–π—Ñ–∞',
    description: '–í–æ–¥–∏—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B, C. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 8 –ª–µ—Ç. –ò—â—É —Ä–∞–±–æ—Ç—É –≤–æ–¥–∏—Ç–µ–ª–µ–º.',
    category: '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç',
    employment: '–ø–æ–ª–Ω–∞—è',
    languages: ['—Ä—É—Å—Å–∫–∏–π', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'],
    isDemanded: false,
    contact: '050-234-5678',
    gender: '–º—É–∂—á–∏–Ω–∞',
    nativeLanguage: '—Ä—É—Å—Å–∫–∏–π',
    documents: '–†–∞–±–æ—á–∞—è –≤–∏–∑–∞',
    announcement: '–û–ø—ã—Ç–Ω—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É',
    note: '–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ',
    documentType: '–†–∞–±–æ—á–∞—è –≤–∏–∑–∞'
  },
  {
    name: '–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞',
    city: '–ò–µ—Ä—É—Å–∞–ª–∏–º',
    description: '–£–±–æ—Ä—â–∏—Ü–∞ —Å –æ–ø—ã—Ç–æ–º 3 –≥–æ–¥–∞. –¢—â–∞—Ç–µ–ª—å–Ω–∞—è, –∞–∫–∫—É—Ä–∞—Ç–Ω–∞—è, —Ä–∞–±–æ—Ç–∞—é –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.',
    category: '—É–±–æ—Ä–∫–∞',
    employment: '—á–∞—Å—Ç–∏—á–Ω–∞—è',
    languages: ['—Ä—É—Å—Å–∫–∏–π', '—É–∫—Ä–∞–∏–Ω—Å–∫–∏–π'],
    isDemanded: true,
    contact: '050-345-6789',
    gender: '–∂–µ–Ω—â–∏–Ω–∞',
    nativeLanguage: '—Ä—É—Å—Å–∫–∏–π',
    documents: '–í–∏–∑–∞ –ë1',
    announcement: '–£–±–æ—Ä—â–∏—Ü–∞ –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É',
    note: '–ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ –≤ —á–∞—Å—Ç–Ω—ã—Ö –¥–æ–º–∞—Ö –∏ –æ—Ñ–∏—Å–∞—Ö',
    documentType: '–í–∏–∑–∞ –ë1'
  },
  {
    name: '–î–º–∏—Ç—Ä–∏–π –í–æ–ª–∫–æ–≤',
    city: '–ê—à–¥–æ–¥',
    description: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å, –æ–ø—ã—Ç 6 –ª–µ—Ç. –†–∞–±–æ—Ç–∞—é —Å –±–µ—Ç–æ–Ω–æ–º, –∫–∏—Ä–ø–∏—á–æ–º, –æ—Ç–¥–µ–ª–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã.',
    category: '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ',
    employment: '–ø–æ–ª–Ω–∞—è',
    languages: ['—Ä—É—Å—Å–∫–∏–π', '–∏–≤—Ä–∏—Ç'],
    isDemanded: false,
    contact: '050-456-7890',
    gender: '–º—É–∂—á–∏–Ω–∞',
    nativeLanguage: '—Ä—É—Å—Å–∫–∏–π',
    documents: '–¢–µ—É–¥–∞—Ç –ó–µ—É—Ç',
    announcement: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É',
    note: '–ì–æ—Ç–æ–≤ –∫ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º',
    documentType: '–¢–µ—É–¥–∞—Ç –ó–µ—É—Ç'
  },
  {
    name: '–û–ª—å–≥–∞ –ú–æ—Ä–æ–∑–æ–≤–∞',
    city: '–ù–µ—Ç–∞–Ω–∏—è',
    description: '–ü–æ–≤–∞—Ä —Å –æ–ø—ã—Ç–æ–º 4 –≥–æ–¥–∞. –ì–æ—Ç–æ–≤–ª—é —Ä—É—Å—Å–∫—É—é, –∏–∑—Ä–∞–∏–ª—å—Å–∫—É—é –∫—É—Ö–Ω—é. –ò—â—É —Ä–∞–±–æ—Ç—É –ø–æ–≤–∞—Ä–æ–º.',
    category: '–æ–±—â–µ–ø–∏—Ç',
    employment: '–ø–æ–ª–Ω–∞—è',
    languages: ['—Ä—É—Å—Å–∫–∏–π', '–∏–≤—Ä–∏—Ç', '–∞–Ω–≥–ª–∏–π—Å–∫–∏–π'],
    isDemanded: true,
    contact: '050-567-8901',
    gender: '–∂–µ–Ω—â–∏–Ω–∞',
    nativeLanguage: '—Ä—É—Å—Å–∫–∏–π',
    documents: '–†–∞–±–æ—á–∞—è –≤–∏–∑–∞',
    announcement: '–ü–æ–≤–∞—Ä –∏—â–µ—Ç —Ä–∞–±–æ—Ç—É',
    note: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≥–æ—Ä—è—á–∏–π —Ü–µ—Ö',
    documentType: '–†–∞–±–æ—á–∞—è –≤–∏–∑–∞'
  }
];

/**
 * Test function to simulate adding new candidates and sending notifications
 */
async function testCandidateNotifications() {
  try {
    console.log('üß™ Starting candidate notification test...');
    
    // Test 1: Send notification for single candidate
    console.log('\nüìß Test 1: Single candidate notification');
    const singleCandidate = testCandidates[0];
    const singleResult = await sendSingleCandidateNotification(singleCandidate);
    console.log('Single candidate result:', singleResult);
    
    // Test 2: Send notification for multiple candidates
    console.log('\nüìß Test 2: Multiple candidates notification');
    const multipleCandidates = testCandidates.slice(0, 3);
    const multipleResult = await sendNewCandidatesNotification(multipleCandidates);
    console.log('Multiple candidates result:', multipleResult);
    
    // Test 3: Send notification for all 5 candidates
    console.log('\nüìß Test 3: All 5 candidates notification');
    const allCandidatesResult = await sendNewCandidatesNotification(testCandidates);
    console.log('All candidates result:', allCandidatesResult);
    
    console.log('\n‚úÖ All tests completed successfully!');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Test function to check if users exist in the database
 */
async function checkUsers() {
  try {
    console.log('üë• Checking users in database...');
    
    const users = await prisma.user.findMany({
      select: {
        id: true,
        email: true,
        firstName: true,
        lastName: true,
      }
    });
    
    console.log(`Found ${users.length} users:`);
    users.forEach((user, index) => {
      console.log(`${index + 1}. ${user.firstName || 'N/A'} ${user.lastName || 'N/A'} (${user.email})`);
    });
    
    if (users.length === 0) {
      console.log('‚ö†Ô∏è No users found. Please add some users to test notifications.');
    }
    
  } catch (error) {
    console.error('‚ùå Error checking users:', error);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Test function to create test users if none exist
 */
async function createTestUsers() {
  try {
    console.log('üë• Creating test users...');
    
    const existingUsers = await prisma.user.count();
    
    if (existingUsers === 0) {
      const testUsers = [
        {
          email: 'test1@worknow.com',
          firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
          lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 1',
          clerkUserId: 'test_clerk_user_1'
        },
        {
          email: 'test2@worknow.com',
          firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
          lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å 2',
          clerkUserId: 'test_clerk_user_2'
        },
        {
          email: 'test3@worknow.com',
          firstName: 'Test',
          lastName: 'User 3',
          clerkUserId: 'test_clerk_user_3'
        }
      ];
      
      for (const userData of testUsers) {
        await prisma.user.create({
          data: userData
        });
        console.log(`‚úÖ Created test user: ${userData.email}`);
      }
      
      console.log('‚úÖ All test users created successfully!');
    } else {
      console.log(`‚ÑπÔ∏è Found ${existingUsers} existing users, skipping test user creation.`);
    }
    
  } catch (error) {
    console.error('‚ùå Error creating test users:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Main execution
async function main() {
  const command = process.argv[2];
  
  switch (command) {
    case 'test-notifications':
      await testCandidateNotifications();
      break;
    case 'check-users':
      await checkUsers();
      break;
    case 'create-test-users':
      await createTestUsers();
      break;
    default:
      console.log('Usage:');
      console.log('  node test-candidate-notifications.js test-notifications  - Test notification sending');
      console.log('  node test-candidate-notifications.js check-users        - Check existing users');
      console.log('  node test-candidate-notifications.js create-test-users  - Create test users');
      break;
  }
}

// Run the main function
main().catch(console.error); 