import { config } from 'dotenv';
import { PrismaClient } from '@prisma/client';

// Load environment variables
config();

const prisma = new PrismaClient();

// Copy the category mapping function from napcep.js
function determineCategoryFromTitle(title) {
	const titleLower = title.toLowerCase();

	// –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
	const categoryMapping = {
		// –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç
		—Å—Ç—Ä–æ–∏—Ç–µ–ª—å: 146, // –°—Ç—Ä–æ–π–∫–∞
		—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ: 146,
		—Å—Ç—Ä–æ–π–∫–∞: 146,
		—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω: 146,
		–ø–ª–æ—Ç–Ω–∏–∫: 160, // –ü–ª–æ—Ç–Ω–∏–∫
		–ø–ª–æ—Ç–Ω–∏—á: 160,
		—Å–≤–∞—Ä—â–∏–∫: 165, // –°–≤–∞—Ä—â–∏–∫
		—Å–≤–∞—Ä–∫–∞: 165,
		—ç–ª–µ–∫—Ç—Ä–∏–∫: 173, // –≠–ª–µ–∫—Ç—Ä–∏–∫
		—ç–ª–µ–∫—Ç—Ä–∏—á: 173,
		—Ä–µ–º–æ–Ω—Ç: 161, // –†–µ–º–æ–Ω—Ç
		—Ä–µ–º–æ–Ω—Ç–Ω: 161,

		// –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –¥–æ—Å—Ç–∞–≤–∫–∞
		–≤–æ–¥–∏—Ç–µ–ª—å: 151, // –ü–µ—Ä–µ–≤–æ–∑–∫–∞
		—à–æ—Ñ–µ—Ä: 151,
		–¥–æ—Å—Ç–∞–≤–∫–∞: 150, // –î–æ—Å—Ç–∞–≤–∫–∞
		–∫—É—Ä—å–µ—Ä: 150,
		—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: 169, // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
		–ø–µ—Ä–µ–≤–æ–∑–∫–∞: 151,

		// –°–∫–ª–∞–¥ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
		—Å–∫–ª–∞–¥: 164, // –°–∫–ª–∞–¥
		—Å–∫–ª–∞–¥—Å–∫: 164,
		–∑–∞–≤–æ–¥: 153, // –ó–∞–≤–æ–¥
		–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ: 171, // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
		–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤: 171,

		// –¢–æ—Ä–≥–æ–≤–ª—è –∏ –æ—Ñ–∏—Å
		–ø—Ä–æ–¥–∞–≤–µ—Ü: 170, // –¢–æ—Ä–≥–æ–≤–ª—è
		–ø—Ä–æ–¥–∞–∂: 170,
		–∫–∞—Å—Å–∏—Ä: 170,
		–æ—Ñ–∏—Å: 158, // –û—Ñ–∏—Å
		–æ—Ñ–∏—Å–Ω: 158,
		—Å–µ–∫—Ä–µ—Ç–∞—Ä—å: 158,
		–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: 158,

		// –û–±—â–µ–ø–∏—Ç –∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã
		–∫—É—Ö–Ω—è: 159, // –û–±—â–µ–ø–∏—Ç
		–ø–æ–≤–∞—Ä: 159,
		–æ—Ñ–∏—Ü–∏–∞–Ω—Ç: 159,
		–±–∞—Ä–º–µ–Ω: 159,
		—Ä–µ—Å—Ç–æ—Ä–∞–Ω: 159,
		–∫–∞—Ñ–µ: 159,
		–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞: 149, // –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã
		–æ—Ç–µ–ª—å: 149,
		hotel: 149,

		// –£–±–æ—Ä–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
		—É–±–æ—Ä—â–∏—Ü–∞: 147, // –£–±–æ—Ä–∫–∞
		—É–±–æ—Ä—â–∏–∫: 147,
		—É–±–æ—Ä–∫–∞: 147,
		–∫–ª–∏–Ω–∏–Ω–≥: 147,
		cleaning: 147,

		// –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
		–º–µ–¥–∏—Ü–∏–Ω: 163, // –ú–µ–¥–∏—Ü–∏–Ω–∞
		–≤—Ä–∞—á: 163,
		–º–µ–¥—Å–µ—Å—Ç—Ä–∞: 163,
		–∑–¥–æ—Ä–æ–≤—å–µ: 154, // –ó–¥–æ—Ä–æ–≤—å–µ
		–º–µ–¥–∏—Ü–∏–Ω—Å–∫: 163,

		// –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω—è–Ω–∏
		—É—á–∏—Ç–µ–ª—å: 162, // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
		–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: 162,
		—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä: 162,
		–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: 162,
		–Ω—è–Ω—è: 156, // –ù—è–Ω–∏
		–Ω—è–Ω—å: 156,
		babysitter: 156,

		// –û—Ö—Ä–∞–Ω–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
		–æ—Ö—Ä–∞–Ω–Ω–∏–∫: 157, // –û—Ö—Ä–∞–Ω–∞
		–æ—Ö—Ä–∞–Ω–∞: 157,
		security: 157,
		'security guard': 157,

		// –ë—å—é—Ç–∏-–∏–Ω–¥—É—Å—Ç—Ä–∏—è
		–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä: 148, // –ë—å—é—Ç–∏-–∏–Ω–¥—É—Å—Ç—Ä–∏—è
		–º–∞—Å—Å–∞–∂–∏—Å—Ç: 148,
		–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥: 148,
		–º–∞–Ω–∏–∫—é—Ä: 148,
		—Å–∞–ª–æ–Ω: 148,
		beauty: 148,

		// –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å
		–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å: 152, // –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å
		–º–µ—Ö–∞–Ω–∏–∫: 152,
		–∞–≤—Ç–æ: 152,
		car: 152,
		garage: 152,

		// –°–≤—è–∑—å –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
		—Å–≤—è–∑—å: 166, // –°–≤—è–∑—å-—Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
		—Ç–µ–ª–µ–∫–æ–º: 166,
		–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç: 166,
		it: 166,
		developer: 166,

		// –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
		—Å–µ–ª—å—Å–∫–æ–µ: 167, // –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
		—Ñ–µ—Ä–º–µ—Ä: 167,
		—Å–∞–¥–æ–≤–Ω–∏–∫: 167,
		—Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤: 167,

		// –£—Ö–æ–¥ –∑–∞ –ø–æ–∂–∏–ª—ã–º–∏
		—É—Ö–æ–¥: 168, // –£—Ö–æ–¥ –∑–∞ –ø–æ–∂–∏–ª—ã–º–∏
		–ø–æ–∂–∏–ª: 168,
		—Å–∏–¥–µ–ª–∫–∞: 168,
		caregiver: 168,

		// –®–≤–µ–∏
		—à–≤–µ—è: 172, // –®–≤–µ–∏
		–ø–æ—Ä—Ç–Ω–æ–π: 172,
		—à–≤–µ–π–Ω: 172,
		seamstress: 172,

		// –ò–Ω–∂–µ–Ω–µ—Ä—ã
		–∏–Ω–∂–µ–Ω–µ—Ä: 155, // –ò–Ω–∂–µ–Ω–µ—Ä—ã
		engineer: 155,
		—Ç–µ—Ö–Ω–∏–∫: 155,

		// –û–±—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		—Ä–∞–±–æ—á–∏–π: 174, // –†–∞–∑–Ω–æ–µ
		—Ä–∞–±–æ—Ç–Ω–∏–∫: 174,
		–ø–æ–º–æ—â–Ω–∏–∫: 174,
		assistant: 174,
		worker: 174,
	};

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
	for (const [keyword, categoryId] of Object.entries(categoryMapping)) {
		if (titleLower.includes(keyword)) {
			return categoryId;
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–†–∞–∑–Ω–æ–µ"
	return 174; // –†–∞–∑–Ω–æ–µ
}

async function testCategoryAssignment() {
	console.log('üîç Testing Category Assignment...');

	try {
		// Get all categories for reference
		const categories = await prisma.category.findMany({
			orderBy: { name: 'asc' },
		});

		const categoryMap = {};
		categories.forEach((cat) => {
			categoryMap[cat.id] = cat.name;
		});

		console.log('\nüìã Available categories:');
		categories.forEach((cat) => {
			console.log(`   ${cat.id}: ${cat.name}`);
		});

		// Test job titles
		const testTitles = [
			'–°—Ç—Ä–æ–∏—Ç–µ–ª—å –Ω–∞ —Å—Ç—Ä–æ–π–∫—É',
			'–í–æ–¥–∏—Ç–µ–ª—å –¥–æ—Å—Ç–∞–≤–∫–∏',
			'–ü—Ä–æ–¥–∞–≤–µ—Ü –≤ –º–∞–≥–∞–∑–∏–Ω',
			'–£–±–æ—Ä—â–∏—Ü–∞ –≤ –æ—Ñ–∏—Å',
			'–ü–æ–≤–∞—Ä –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
			'–≠–ª–µ–∫—Ç—Ä–∏–∫ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞',
			'–ù—è–Ω—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞',
			'–û—Ö—Ä–∞–Ω–Ω–∏–∫ –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä',
			'–ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä –≤ —Å–∞–ª–æ–Ω',
			'–ú–µ—Ö–∞–Ω–∏–∫ –≤ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å',
			'–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç IT',
			'–°–∞–¥–æ–≤–Ω–∏–∫ –¥–ª—è —É—Ö–æ–¥–∞',
			'–°–∏–¥–µ–ª–∫–∞ –¥–ª—è –ø–æ–∂–∏–ª—ã—Ö',
			'–®–≤–µ—è –≤ –∞—Ç–µ–ª—å–µ',
			'–ò–Ω–∂–µ–Ω–µ—Ä-—Ç–µ—Ö–Ω–æ–ª–æ–≥',
			'–†–∞–±–æ—á–∏–π –Ω–∞ –∑–∞–≤–æ–¥',
			'–û–±—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∏',
		];

		console.log('\nüß™ Testing Category Assignment:');

		const results = [];
		for (const title of testTitles) {
			const categoryId = determineCategoryFromTitle(title);
			const categoryName = categoryMap[categoryId] || 'Unknown';

			results.push({
				title,
				categoryId,
				categoryName,
			});

			console.log(`   "${title}" ‚Üí ${categoryName} (ID: ${categoryId})`);
		}

		// Statistics
		const categoryStats = {};
		results.forEach((result) => {
			categoryStats[result.categoryName] =
				(categoryStats[result.categoryName] || 0) + 1;
		});

		console.log('\nüìä Category Assignment Statistics:');
		for (const [categoryName, count] of Object.entries(categoryStats)) {
			const percentage = ((count / results.length) * 100).toFixed(1);
			console.log(`   ${categoryName}: ${count} jobs (${percentage}%)`);
		}

		// Test edge cases
		console.log('\nüîç Testing Edge Cases:');
		const edgeCases = [
			'–†–∞–±–æ—Ç–Ω–∏–∫', // Should default to "–†–∞–∑–Ω–æ–µ"
			'–ü–æ–º–æ—â–Ω–∏–∫', // Should default to "–†–∞–∑–Ω–æ–µ"
			'Worker', // Should default to "–†–∞–∑–Ω–æ–µ"
			'Assistant', // Should default to "–†–∞–∑–Ω–æ–µ"
			'–°—Ç—Ä–æ–∏—Ç–µ–ª—å-—ç–ª–µ–∫—Ç—Ä–∏–∫', // Should match first keyword (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å)
			'–í–æ–¥–∏—Ç–µ–ª—å-–∫—É—Ä—å–µ—Ä', // Should match first keyword (–≤–æ–¥–∏—Ç–µ–ª—å)
		];

		for (const title of edgeCases) {
			const categoryId = determineCategoryFromTitle(title);
			const categoryName = categoryMap[categoryId] || 'Unknown';
			console.log(`   "${title}" ‚Üí ${categoryName} (ID: ${categoryId})`);
		}

		console.log('\n‚úÖ Category assignment test completed!');
		console.log(
			'üéØ The system correctly assigns categories based on job titles',
		);
	} catch (error) {
		console.error('‚ùå Error testing category assignment:', error);
	} finally {
		await prisma.$disconnect();
	}
}

// Run the test
testCategoryAssignment().catch(console.error);
