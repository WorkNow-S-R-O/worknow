import AIJobTitleService from '../apps/api/services/aiJobTitleService.js';

/**
 * Test the fallback system only (without OpenAI calls)
 * This demonstrates that the system works reliably even without AI
 */
async function testFallbackOnly() {
	console.log('üß™ Testing Fallback System Only...\n');
	console.log(
		'üìä This will test the rule-based title generation without OpenAI\n',
	);

	const testDescriptions = [
		'–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤–∞—Ä –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω. –†–∞–±–æ—Ç–∞ —Å 8:00 –¥–æ 16:00. –ó–∞—Ä–ø–ª–∞—Ç–∞ 45 —à–µ–∫/—á–∞—Å.',
		'–ù—É–∂–µ–Ω —É–±–æ—Ä—â–∏–∫ –≤ –æ—Ñ–∏—Å. –†–∞–±–æ—Ç–∞ 5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é. –ó–∞—Ä–ø–ª–∞—Ç–∞ 40 —à–µ–∫/—á–∞—Å.',
		'–ò—â–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –≤ –∫–∞—Ñ–µ. –†–∞–±–æ—Ç–∞ –≤ —Å–º–µ–Ω—ã. –ó–∞—Ä–ø–ª–∞—Ç–∞ 50 —à–µ–∫/—á–∞—Å + —á–∞–µ–≤—ã–µ.',
		'–¢—Ä–µ–±—É–µ—Ç—Å—è –≥—Ä—É–∑—á–∏–∫ –Ω–∞ —Å–∫–ª–∞–¥. –†–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 17:00. –ó–∞—Ä–ø–ª–∞—Ç–∞ 35 —à–µ–∫/—á–∞—Å.',
		'–ù—É–∂–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ó–∞—Ä–ø–ª–∞—Ç–∞ 55 —à–µ–∫/—á–∞—Å.',
		'–ò—â–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –º–∞–≥–∞–∑–∏–Ω. –†–∞–±–æ—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏. –ó–∞—Ä–ø–ª–∞—Ç–∞ 45 —à–µ–∫/—á–∞—Å.',
		'–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Å—Å–∏—Ä –≤ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç. –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–π. –ó–∞—Ä–ø–ª–∞—Ç–∞ 40 —à–µ–∫/—á–∞—Å.',
		'–ù—É–∂–µ–Ω —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 2+ –≥–æ–¥–∞. –ó–∞—Ä–ø–ª–∞—Ç–∞ 60 —à–µ–∫/—á–∞—Å.',
		'–ò—â–µ–º —ç–ª–µ–∫—Ç—Ä–∏–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏. –õ–∏—Ü–µ–Ω–∑–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞. –ó–∞—Ä–ø–ª–∞—Ç–∞ 70 —à–µ–∫/—á–∞—Å.',
		'–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫ –¥–ª—è —Ä–µ–º–æ–Ω—Ç–∞. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã 3+ –≥–æ–¥–∞. –ó–∞—Ä–ø–ª–∞—Ç–∞ 65 —à–µ–∫/—á–∞—Å.',
	];

	console.log(
		`üìù Testing ${testDescriptions.length} descriptions with fallback system...\n`,
	);

	let successCount = 0;
	let totalTime = 0;

	for (let i = 0; i < testDescriptions.length; i++) {
		const description = testDescriptions[i];

		console.log(`üîç Test ${i + 1}/${testDescriptions.length}:`);
		console.log(`   Description: ${description.substring(0, 50)}...`);

		try {
			const startTime = Date.now();

			// Force fallback by simulating quota error
			const result = AIJobTitleService.fallbackTitleGeneration(description);
			const endTime = Date.now();

			const processingTime = endTime - startTime;
			totalTime += processingTime;

			console.log(`   ‚úÖ Success: "${result.title}"`);
			console.log(`   üìä Method: ${result.method}`);
			console.log(`   üéØ Confidence: ${result.confidence.toFixed(2)}`);
			console.log(`   ‚è±Ô∏è  Time: ${processingTime}ms`);

			successCount++;
		} catch (error) {
			console.log(`   ‚ùå Error: ${error.message}`);
		}

		console.log(''); // Empty line for readability
	}

	console.log('‚úÖ Fallback system test completed!');
	console.log('üìä Summary:');
	console.log(`   - Total tests: ${testDescriptions.length}`);
	console.log(`   - Successful: ${successCount}`);
	console.log(
		`   - Success rate: ${((successCount / testDescriptions.length) * 100).toFixed(1)}%`,
	);
	console.log(`   - Average time: ${(totalTime / successCount).toFixed(0)}ms`);
	console.log(`   - Total time: ${totalTime}ms`);

	console.log('\nüí° Key Benefits:');
	console.log('   ‚úÖ No API costs');
	console.log('   ‚úÖ No rate limits');
	console.log('   ‚úÖ No quota issues');
	console.log('   ‚úÖ Instant processing');
	console.log('   ‚úÖ Reliable results');
	console.log('   ‚úÖ Always available');
}

// Run the test
testFallbackOnly().catch(console.error);
