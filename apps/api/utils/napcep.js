import puppeteer from 'puppeteer';
import pkg from '@prisma/client';
const { PrismaClient } = pkg;
import { fakerRU as faker } from '@faker-js/faker';
import AIJobTitleService from '../services/aiJobTitleService.js';

const prisma = new PrismaClient();
const MAX_JOBS = 200;

// Function to extract and validate price from description
function extractPriceFromDescription(description) {
    // Look for patterns like "40 —à–µ–∫", "40 –®–ï–ö", "40 shek", "40 SHEK", etc.
    const pricePatterns = [
        /(\d+)\s*—à–µ–∫/gi,           // 40 —à–µ–∫
        /(\d+)\s*–®–ï–ö/gi,           // 40 –®–ï–ö
        /(\d+)\s*shek/gi,          // 40 shek
        /(\d+)\s*SHEK/gi,          // 40 SHEK
        /(\d+)\s*‚Ç™/gi,             // 40 ‚Ç™
        /(\d+)\s*shekel/gi,        // 40 shekel
        /(\d+)\s*SHEKEL/gi,        // 40 SHEKEL
        /(\d+)\s*—à–µ–∫/gi,           // 40 —à–µ–∫ (lowercase)
        /(\d+)\s*–®–ï–ö–ï–õ–¨/gi,        // 40 –®–ï–ö–ï–õ–¨
        /(\d+)\s*shekel/gi,        // 40 shekel
        /(\d+)\s*SHEKEL/gi,        // 40 SHEKEL
        /(\d+)\s*‚Ç™/gi,             // 40 ‚Ç™
        /(\d+)\s*ILS/gi,           // 40 ILS
        /(\d+)\s*ils/gi,           // 40 ils
        /(\d+)\s*NIS/gi,           // 40 NIS
        /(\d+)\s*nis/gi,           // 40 nis
    ];

    for (const pattern of pricePatterns) {
        const match = description.match(pattern);
        if (match) {
            const price = parseInt(match[1], 10);
            // Validate that price is reasonable (between 20 and 200 shekels per hour)
            if (price >= 20 && price <= 200) {
                return price;
            }
        }
    }

    return null;
}

// Function to validate job data consistency
function validateJobData(job) {
    const descriptionPrice = extractPriceFromDescription(job.description);
    
    if (!descriptionPrice) {
        console.log(`   ‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é "${job.title}" - –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω–æ–π —Ü–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏`);
        return false;
    }

    // Update the job object with the validated price
    job.validatedPrice = descriptionPrice;
    console.log(`   ‚úÖ –í–∞–ª–∏–¥–Ω–∞—è —Ü–µ–Ω–∞ –Ω–∞–π–¥–µ–Ω–∞: ${descriptionPrice} —à–µ–∫–µ–ª–µ–π/—á–∞—Å –¥–ª—è "${job.title}"`);
    
    return true;
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö
async function clearOldData() {
    console.log("üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...");
    await prisma.job.deleteMany({});
    await prisma.user.deleteMany({
        where: { clerkUserId: { startsWith: "user_" } }
    });
    console.log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

// –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–∞–π—Ç–∞
async function fetchJobDescriptions() {
    console.log("üîç –ó–∞–ø—É—Å–∫–∞–µ–º Puppeteer –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Orbita...");
    console.log("üí∞ –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏...");
    console.log(`üéØ –¶–µ–ª—å: —Å–æ–±—Ä–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–º–∞–∫—Å–∏–º—É–º ${MAX_JOBS})`);

    const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] });
    const page = await browser.newPage();

    page.setDefaultTimeout(45000); // 45 seconds instead of 30
    page.setDefaultNavigationTimeout(45000);

    try {
        await page.goto('https://doska.orbita.co.il/jobs/required/', { 
            waitUntil: 'networkidle2',
            timeout: 45000 
        });
    } catch (error) {
        console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${error.message}`);
        await browser.close();
        return [];
    }

    let jobs = [];
    let currentPage = 1;
    let totalProcessed = 0;
    let totalValidated = 0;
    let consecutiveEmptyPages = 0;
    let consecutiveErrors = 0;
    const MAX_CONSECUTIVE_EMPTY_PAGES = 5;
    const MAX_CONSECUTIVE_ERRORS = 3;
    

    while (jobs.length < MAX_JOBS) {
        console.log(`üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage}...`);

        try {
            const newJobs = await page.evaluate(() => {
                const jobElements = document.querySelectorAll('.message');
                const jobData = [];

                jobElements.forEach((job) => {
                    let description = job.querySelector('.information')?.innerText.trim() || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
                    let title = job.querySelector('.caption .cap')?.innerText.trim() || null;
                    let city = job.querySelector('.hidden-xs a')?.innerText.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω';

                    // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                    let phoneMatch = description.match(/\+972[-\s]?\d{1,2}[-\s]?\d{3}[-\s]?\d{4,6}/);
                    let phone = phoneMatch ? phoneMatch[0].replace(/\s+/g, '') : null;

                    if (!title) {
                        title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
                    }

                    // ‚úÖ –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
                    if (phone) {
                        jobData.push({ title, description, city, phone });
                    }
                });

                return jobData;
            });
            
            console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ ${newJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);
            
            if (newJobs.length === 0) {
                consecutiveEmptyPages++;
                console.log(`   ‚ö†Ô∏è –ü—É—Å—Ç–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} (${consecutiveEmptyPages}/${MAX_CONSECUTIVE_EMPTY_PAGES})`);
                
                if (consecutiveEmptyPages >= MAX_CONSECUTIVE_EMPTY_PAGES) {
                    console.log(`   üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ–¥—Ä—è–¥ (${consecutiveEmptyPages}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.`);
                    break;
                }
            } else {
                consecutiveEmptyPages = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                consecutiveErrors = 0;
            }
            
            // üîç –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            const validatedJobs = [];
            for (const job of newJobs) {
                totalProcessed++;
                if (validateJobData(job)) {
                    validatedJobs.push(job);
                    totalValidated++;
                }
            }

            jobs = [...jobs, ...validatedJobs];
            console.log(`   ‚úÖ –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–æ: ${validatedJobs.length}/${newJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
            console.log(`   üìà –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: ${jobs.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);

            if (jobs.length >= MAX_JOBS) {
                console.log("‚úÖ –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!");
                break;
            }

            // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
            const nextPageUrl = await page.evaluate(() => {
                const nextLink = Array.from(document.querySelectorAll('a')).find(a => a.title === "–°–ª–µ–¥—É—é—â–∞—è");
                return nextLink ? nextLink.href : null;
            });

            if (!nextPageUrl) {
                console.log("‚úÖ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç. –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...");
                
                // –ü–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ URL –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                const alternativeUrls = [
                    'https://doska.orbita.co.il/jobs/',
                    'https://doska.orbita.co.il/jobs/offered/',
                    'https://doska.orbita.co.il/jobs/required/'
                ];
                
                let foundAlternative = false;
                for (const altUrl of alternativeUrls) {
                    try {
                        console.log(`   üîÑ –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL: ${altUrl}`);
                        await page.goto(altUrl, { waitUntil: 'networkidle2' });
                        foundAlternative = true;
                        currentPage = 1;
                        consecutiveEmptyPages = 0;
                        consecutiveErrors = 0;
                        break;
                    } catch (error) {
                        console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${altUrl}: ${error.message}`);
                    }
                }
                
                if (!foundAlternative) {
                    console.log("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.");
                    break;
                }
            }  else {
                // Navigate to next page
                try {
                    await page.goto(nextPageUrl, { 
                        waitUntil: 'networkidle2',
                        timeout: 45000 
                    });
                    currentPage++;
                } catch (error) {
                    console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${error.message}`);
                    console.log(`   üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...`);
                    // Don't increment currentPage, try to continue
                }
            }

        } catch (error) {
            consecutiveErrors++;
            console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ${currentPage}: ${error.message}`);
            
            if (consecutiveErrors >= MAX_CONSECUTIVE_ERRORS) {
                console.log(`   üõë –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥ (${consecutiveErrors}). –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥.`);
                break;
            }
            
            console.log(`   üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥... (–æ—à–∏–±–∫–∞ ${consecutiveErrors}/${MAX_CONSECUTIVE_ERRORS})`);
            
            // Try to reload page once, then move on
            try {
                await page.reload({ 
                    waitUntil: 'networkidle2',
                    timeout: 45000 
                });
            } catch (reloadError) {
                console.log(`   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${reloadError.message}`);
                console.log(`   ‚è≠Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ...`);
                currentPage++; // Move to next page instead of staying stuck
            }
        }
        
    }

    await browser.close();
    console.log(`\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ü–µ–Ω:`);
    console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${totalProcessed}`);
    console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: ${totalValidated}`);
    console.log(`   –ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö: ${((totalValidated / totalProcessed) * 100).toFixed(1)}%`);
    console.log(`   –°–æ–±—Ä–∞–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${jobs.length}`);
    
    if (jobs.length < MAX_JOBS) {
        console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –°–æ–±—Ä–∞–Ω–æ —Ç–æ–ª—å–∫–æ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ ${MAX_JOBS} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö`);
        console.log(`üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö`);
    } else {
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω–æ ${jobs.length} –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π!`);
    }
    
    return jobs;
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
function determineCategoryFromTitle(title) {
    const titleLower = title.toLowerCase();
    
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ ID –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö)
    const categoryMapping = {
        // –°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ –∏ —Ä–µ–º–æ–Ω—Ç
        '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å': 146, // –°—Ç—Ä–æ–π–∫–∞
        '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ': 146,
        '—Å—Ç—Ä–æ–π–∫–∞': 146,
        '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω': 146,
        '–ø–ª–æ—Ç–Ω–∏–∫': 160, // –ü–ª–æ—Ç–Ω–∏–∫
        '–ø–ª–æ—Ç–Ω–∏—á': 160,
        '—Å–≤–∞—Ä—â–∏–∫': 165, // –°–≤–∞—Ä—â–∏–∫
        '—Å–≤–∞—Ä–∫–∞': 165,
        '—ç–ª–µ–∫—Ç—Ä–∏–∫': 173, // –≠–ª–µ–∫—Ç—Ä–∏–∫
        '—ç–ª–µ–∫—Ç—Ä–∏—á': 173,
        '—Ä–µ–º–æ–Ω—Ç': 161, // –†–µ–º–æ–Ω—Ç
        '—Ä–µ–º–æ–Ω—Ç–Ω': 161,
        
        // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏ –¥–æ—Å—Ç–∞–≤–∫–∞
        '–≤–æ–¥–∏—Ç–µ–ª—å': 151, // –ü–µ—Ä–µ–≤–æ–∑–∫–∞
        '—à–æ—Ñ–µ—Ä': 151,
        '–¥–æ—Å—Ç–∞–≤–∫–∞': 150, // –î–æ—Å—Ç–∞–≤–∫–∞
        '–∫—É—Ä—å–µ—Ä': 150,
        '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 169, // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        '–ø–µ—Ä–µ–≤–æ–∑–∫–∞': 151,
        
        // –°–∫–ª–∞–¥ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        '—Å–∫–ª–∞–¥': 164, // –°–∫–ª–∞–¥
        '—Å–∫–ª–∞–¥—Å–∫': 164,
        '–∑–∞–≤–æ–¥': 153, // –ó–∞–≤–æ–¥
        '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ': 171, // –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
        '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤': 171,
        
        // –¢–æ—Ä–≥–æ–≤–ª—è –∏ –æ—Ñ–∏—Å
        '–ø—Ä–æ–¥–∞–≤–µ—Ü': 170, // –¢–æ—Ä–≥–æ–≤–ª—è
        '–ø—Ä–æ–¥–∞–∂': 170,
        '–∫–∞—Å—Å–∏—Ä': 170,
        '–æ—Ñ–∏—Å': 158, // –û—Ñ–∏—Å
        '–æ—Ñ–∏—Å–Ω': 158,
        '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å': 158,
        '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä': 158,
        
        // –û–±—â–µ–ø–∏—Ç –∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã
        '–∫—É—Ö–Ω—è': 159, // –û–±—â–µ–ø–∏—Ç
        '–ø–æ–≤–∞—Ä': 159,
        '–æ—Ñ–∏—Ü–∏–∞–Ω—Ç': 159,
        '–±–∞—Ä–º–µ–Ω': 159,
        '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 159,
        '–∫–∞—Ñ–µ': 159,
        '–≥–æ—Å—Ç–∏–Ω–∏—Ü–∞': 149, // –ì–æ—Å—Ç–∏–Ω–∏—Ü—ã
        '–æ—Ç–µ–ª—å': 149,
        'hotel': 149,
        
        // –£–±–æ—Ä–∫–∞ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ
        '—É–±–æ—Ä—â–∏—Ü–∞': 147, // –£–±–æ—Ä–∫–∞
        '—É–±–æ—Ä—â–∏–∫': 147,
        '—É–±–æ—Ä–∫–∞': 147,
        '–∫–ª–∏–Ω–∏–Ω–≥': 147,
        'cleaning': 147,
        
        // –ú–µ–¥–∏—Ü–∏–Ω–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ
        '–º–µ–¥–∏—Ü–∏–Ω': 163, // –ú–µ–¥–∏—Ü–∏–Ω–∞
        '–≤—Ä–∞—á': 163,
        '–º–µ–¥—Å–µ—Å—Ç—Ä–∞': 163,
        '–∑–¥–æ—Ä–æ–≤—å–µ': 154, // –ó–¥–æ—Ä–æ–≤—å–µ
        '–º–µ–¥–∏—Ü–∏–Ω—Å–∫': 163,
        
        // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –Ω—è–Ω–∏
        '—É—á–∏—Ç–µ–ª—å': 162, // –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å': 162,
        '—Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä': 162,
        '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 162,
        '–Ω—è–Ω—è': 156, // –ù—è–Ω–∏
        '–Ω—è–Ω—å': 156,
        'babysitter': 156,
        
        // –û—Ö—Ä–∞–Ω–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        '–æ—Ö—Ä–∞–Ω–Ω–∏–∫': 157, // –û—Ö—Ä–∞–Ω–∞
        '–æ—Ö—Ä–∞–Ω–∞': 157,
        'security': 157,
        'security guard': 157,
        
        // –ë—å—é—Ç–∏-–∏–Ω–¥—É—Å—Ç—Ä–∏—è
        '–ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä': 148, // –ë—å—é—Ç–∏-–∏–Ω–¥—É—Å—Ç—Ä–∏—è
        '–º–∞—Å—Å–∞–∂–∏—Å—Ç': 148,
        '–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥': 148,
        '–º–∞–Ω–∏–∫—é—Ä': 148,
        '—Å–∞–ª–æ–Ω': 148,
        'beauty': 148,
        
        // –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å
        '–∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å': 152, // –ê–≤—Ç–æ—Å–µ—Ä–≤–∏—Å
        '–º–µ—Ö–∞–Ω–∏–∫': 152,
        '–∞–≤—Ç–æ': 152,
        'car': 152,
        'garage': 152,
        
        // –°–≤—è–∑—å –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        '—Å–≤—è–∑—å': 166, // –°–≤—è–∑—å-—Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
        '—Ç–µ–ª–µ–∫–æ–º': 166,
        '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': 166,
        'it': 166,
        'developer': 166,
        
        // –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
        '—Å–µ–ª—å—Å–∫–æ–µ': 167, // –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
        '—Ñ–µ—Ä–º–µ—Ä': 167,
        '—Å–∞–¥–æ–≤–Ω–∏–∫': 167,
        '—Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤': 167,
        
        // –£—Ö–æ–¥ –∑–∞ –ø–æ–∂–∏–ª—ã–º–∏
        '—É—Ö–æ–¥': 168, // –£—Ö–æ–¥ –∑–∞ –ø–æ–∂–∏–ª—ã–º–∏
        '–ø–æ–∂–∏–ª': 168,
        '—Å–∏–¥–µ–ª–∫–∞': 168,
        'caregiver': 168,
        
        // –®–≤–µ–∏
        '—à–≤–µ—è': 172, // –®–≤–µ–∏
        '–ø–æ—Ä—Ç–Ω–æ–π': 172,
        '—à–≤–µ–π–Ω': 172,
        'seamstress': 172,
        
        // –ò–Ω–∂–µ–Ω–µ—Ä—ã
        '–∏–Ω–∂–µ–Ω–µ—Ä': 155, // –ò–Ω–∂–µ–Ω–µ—Ä—ã
        'engineer': 155,
        '—Ç–µ—Ö–Ω–∏–∫': 155,
        
        // –û–±—â–∏–µ —Å–ª–æ–≤–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        '—Ä–∞–±–æ—á–∏–π': 174, // –†–∞–∑–Ω–æ–µ
        '—Ä–∞–±–æ—Ç–Ω–∏–∫': 174,
        '–ø–æ–º–æ—â–Ω–∏–∫': 174,
        'assistant': 174,
        'worker': 174
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
    for (const [keyword, categoryId] of Object.entries(categoryMapping)) {
        if (titleLower.includes(keyword)) {
            return categoryId;
        }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º "–†–∞–∑–Ω–æ–µ"
    return 174; // –†–∞–∑–Ω–æ–µ
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π
async function generateJobTitles(jobs) {
    console.log("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π...");
    console.log("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é fallback —Å–∏—Å—Ç–µ–º—É (rule-based)");
    console.log("‚úÖ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ rate limits –∏–ª–∏ quota");
    console.log("‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫");
    console.log("üè∑Ô∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");
    
    let successCount = 0;
    let fallbackCount = 0;
    let categoryAssignedCount = 0;
    let totalTime = 0;
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    const categoryStats = {};
    
    for (let i = 0; i < jobs.length; i++) {
        const job = jobs[i];
        
        try {
            if (job.title === "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") {
                console.log(`   üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${i + 1}/${jobs.length}...`);
                
                const startTime = Date.now();
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                const titleData = AIJobTitleService.fallbackTitleGeneration(job.description);
                const endTime = Date.now();
                
                job.title = titleData.title;
                const processingTime = endTime - startTime;
                totalTime += processingTime;
                
                console.log(`   ‚úÖ –£—Å–ø–µ—Ö: "${titleData.title}" (${titleData.method}, ${processingTime}ms)`);
                console.log(`   üéØ Confidence: ${titleData.confidence.toFixed(2)}`);
                
                successCount++;
                fallbackCount++;
            }
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            const categoryId = determineCategoryFromTitle(job.title);
            job.categoryId = categoryId;
            categoryAssignedCount++;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            categoryStats[categoryId] = (categoryStats[categoryId] || 0) + 1;
            
            console.log(`   üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞: ID ${categoryId} –¥–ª—è "${job.title}"`);
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –¥–ª—è rate limiting)
            if (i % 10 === 0) {
                console.log(`   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${jobs.length} (${((i + 1) / jobs.length * 100).toFixed(1)}%)`);
            }
            
        } catch (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ ${i + 1}:`, error.message);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π fallback –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            job.title = "–û–±—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è";
            job.categoryId = 174; // –†–∞–∑–Ω–æ–µ
            fallbackCount++;
            categoryAssignedCount++;
            categoryStats[174] = (categoryStats[174] || 0) + 1;
        }
    }
    
    console.log(`\nüìä –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount}`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback: ${fallbackCount}`);
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: ${categoryAssignedCount}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${(totalTime / successCount).toFixed(0)}ms`);
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    
    console.log(`\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:`);
    for (const [categoryId, count] of Object.entries(categoryStats)) {
        const percentage = ((count / jobs.length) * 100).toFixed(1);
        console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏—è ID ${categoryId}: ${count} –≤–∞–∫–∞–Ω—Å–∏–π (${percentage}%)`);
    }
    
    console.log(`\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Å–∏—Å—Ç–µ–º—ã:`);
    console.log(`   ‚úÖ –ù–µ—Ç API –∑–∞—Ç—Ä–∞—Ç`);
    console.log(`   ‚úÖ –ù–µ—Ç rate limits`);
    console.log(`   ‚úÖ –ù–µ—Ç quota –ø—Ä–æ–±–ª–µ–º`);
    console.log(`   ‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞`);
    console.log(`   ‚úÖ –ù–∞–¥–µ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`);
    console.log(`   ‚úÖ –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞`);
    console.log(`   ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π`);
    
    return jobs;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
async function createFakeUsersWithJobs(jobs) {
    console.log(`üë• –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...`);

    const defaultCategory = await prisma.category.findUnique({
        where: { name: '–†–∞–∑–Ω–æ–µ' },
    });

    if (!defaultCategory) {
        console.error('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–∞–∑–Ω–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ `prisma db seed`');
        return;
    }

    for (const job of jobs) {
        const city = await prisma.city.findUnique({ where: { name: job.city } });

        if (!city) {
            console.log(`‚ö†Ô∏è –ì–æ—Ä–æ–¥ "${job.city}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é.`);
            continue;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ-–µ–≤—Ä–µ–π—Å–∫–∏—Ö –∏–º–µ–Ω
        const firstName = Math.random() < 0.5 ? faker.person.firstName() : faker.helpers.arrayElement([
            "–ê–≤—Ä–∞–∞–º", "–ò—Ü—Ö–∞–∫", "–Ø–∫–æ–≤", "–ú–æ—à–µ", "–®–ª–æ–º–æ", "–î–∞–≤–∏–¥", "–≠–ª–∏—ç–∑–µ—Ä", "–ú–µ–Ω–∞—Ö–µ–º", "–ò–µ—Ö—É–¥–∞", "–®–∏–º–æ–Ω",
            "–°–∞—Ä–∞", "–†–∞—Ö–µ–ª—å", "–õ–µ—è", "–ú–∏—Ä–∏–∞–º", "–•–∞–Ω–∞", "–ë–∞—Ç—à–µ–≤–∞", "–ê–¥–∞", "–≠—Å—Ç–µ—Ä", "–¢–∞–º–∞—Ä", "–ù–∞–æ–º–∏"
        ]);
        const lastName = faker.person.lastName();
        const email = faker.internet.email({ firstName, lastName });

        const clerkUserId = `user_${faker.string.uuid()}`;

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const phone = job.phone;

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
        const salary = job.validatedPrice ? `${job.validatedPrice}` : `${faker.number.int({ min: 35, max: 50 })}`;

        // üü¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
        const initials = `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
        const imageUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=random&color=fff&size=128`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ fallback –Ω–∞ "–†–∞–∑–Ω–æ–µ"
        const categoryId = job.categoryId || defaultCategory.id;
        
        await prisma.user.create({
            data: {
                clerkUserId,
                firstName,
                lastName,
                email,
                imageUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
                jobs: {
                    create: {
                        title: job.title,
                        description: job.description,
                        salary: salary,
                        phone: phone,
                        city: { connect: { id: city.id } },
                        category: { connect: { id: categoryId } },
                    },
                },
            },
        });
    }

    console.log("üéâ –í—Å–µ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!");
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π —Ü–µ–Ω...\n");
        console.log("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º rule-based –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");
        console.log("üí∞ –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ü–µ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏");
        console.log("‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç OpenAI API");
        console.log("‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞");
        console.log("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö\n");
        
        await clearOldData();
        const jobs = await fetchJobDescriptions();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–∞–¥–µ–∂–Ω–æ–π fallback —Å–∏—Å—Ç–µ–º–æ–π
        const jobsWithTitles = await generateJobTitles(jobs);
        
        await createFakeUsersWithJobs(jobsWithTitles);
        
        console.log("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
        console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        console.log(`   - –í—Å–µ–≥–æ –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: ${jobs.length}`);
        console.log(`   - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${jobs.filter(j => j.title !== "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").length}`);
        console.log(`   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback: ${jobs.filter(j => j.title !== "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").length}`);
        console.log(`   - –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ü–µ–Ω: ${jobs.filter(j => j.validatedPrice).length}`);
        
        console.log("\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:");
        console.log("   - –ù–µ—Ç API –∑–∞—Ç—Ä–∞—Ç");
        console.log("   - –ù–µ—Ç rate limits –∏–ª–∏ quota –ø—Ä–æ–±–ª–µ–º");
        console.log("   - –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞");
        console.log("   - 100% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å");
        console.log("   - –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞");
        console.log("   - –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã –º–µ–∂–¥—É –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –ø–æ–ª–µ–º –∑–∞—Ä–ø–ª–∞—Ç—ã");
        console.log("   - –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏");
        
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:", error);
    } finally {
        await prisma.$disconnect();
    }
}

main().catch(console.error);
