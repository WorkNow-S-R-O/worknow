import puppeteer from 'puppeteer';
import pkg from '@prisma/client';
const { PrismaClient } = pkg;
import { fakerRU as faker } from '@faker-js/faker';
import AIJobTitleService from '../services/aiJobTitleService.js';

const prisma = new PrismaClient();
const MAX_JOBS = 200;

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö
async function clearOldData() {
    console.log("üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...");
    await prisma.job.deleteMany({});
    await prisma.user.deleteMany({
        where: { clerkUserId: { startsWith: "user_" } }
    });
    console.log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

// –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–∞–π—Ç–∞
async function fetchJobDescriptions() {
    console.log("üîç –ó–∞–ø—É—Å–∫–∞–µ–º Puppeteer –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Orbita...");

    const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] });
    const page = await browser.newPage();
    await page.goto('https://doska.orbita.co.il/jobs/required/', { waitUntil: 'networkidle2' });

    let jobs = [];
    let currentPage = 1;

    while (jobs.length < MAX_JOBS) {
        console.log(`üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage}...`);

        const newJobs = await page.evaluate(() => {
            const jobElements = document.querySelectorAll('.message');
            const jobData = [];

            jobElements.forEach((job) => {
                let description = job.querySelector('.information')?.innerText.trim() || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
                let title = job.querySelector('.caption .cap')?.innerText.trim() || null;
                let city = job.querySelector('.hidden-xs a')?.innerText.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω';

                // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                let phoneMatch = description.match(/\+972[-\s]?\d{1,2}[-\s]?\d{3}[-\s]?\d{4,6}/);
                let phone = phoneMatch ? phoneMatch[0].replace(/\s+/g, '') : null;

                if (!title) {
                    title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
                }

                // ‚úÖ –¢–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ —Å —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–º–∏ –Ω–æ–º–µ—Ä–∞–º–∏
                if (phone) {
                    jobData.push({ title, description, city, phone });
                }
            });

            return jobData;
        });

        console.log(`   üìä –ù–∞–π–¥–µ–Ω–æ ${newJobs.length} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ ${currentPage}`);
        jobs = [...jobs, ...newJobs];
        console.log(`   üìà –í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);

        if (jobs.length >= MAX_JOBS) {
            console.log("‚úÖ –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π.");
            break;
        }

        // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        const nextPageUrl = await page.evaluate(() => {
            const nextLink = Array.from(document.querySelectorAll('a')).find(a => a.title === "–°–ª–µ–¥—É—é—â–∞—è");
            return nextLink ? nextLink.href : null;
        });

        if (!nextPageUrl) {
            console.log("‚úÖ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç.");
            break;
        }

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto(nextPageUrl, { waitUntil: 'networkidle2' });
        currentPage++;
    }

    await browser.close();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    return jobs.slice(0, MAX_JOBS);
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º fallback —Å–∏—Å—Ç–µ–º—ã
async function generateJobTitles(jobs) {
    console.log("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π...");
    console.log("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–¥–µ–∂–Ω—É—é fallback —Å–∏—Å—Ç–µ–º—É (rule-based)");
    console.log("‚úÖ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ rate limits –∏–ª–∏ quota");
    console.log("‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫");
    
    let successCount = 0;
    let fallbackCount = 0;
    let totalTime = 0;
    
    for (let i = 0; i < jobs.length; i++) {
        const job = jobs[i];
        
        try {
            if (job.title === "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") {
                console.log(`   üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${i + 1}/${jobs.length}...`);
                
                const startTime = Date.now();
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback —Å–∏—Å—Ç–µ–º—É –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                const titleData = AIJobTitleService.fallbackTitleGeneration(job.description);
                const endTime = Date.now();
                
                job.title = titleData.title;
                const processingTime = endTime - startTime;
                totalTime += processingTime;
                
                console.log(`   ‚úÖ –£—Å–ø–µ—Ö: "${titleData.title}" (${titleData.method}, ${processingTime}ms)`);
                console.log(`   üéØ Confidence: ${titleData.confidence.toFixed(2)}`);
                
                successCount++;
                fallbackCount++;
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–µ –¥–ª—è rate limiting)
                if (i % 10 === 0) {
                    console.log(`   üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${i + 1}/${jobs.length} (${((i + 1) / jobs.length * 100).toFixed(1)}%)`);
                }
            }
        } catch (error) {
            console.error(`   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ${i + 1}:`, error.message);
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π fallback –∑–∞–≥–æ–ª–æ–≤–æ–∫
            job.title = "–û–±—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è";
            fallbackCount++;
        }
    }
    
    console.log(`\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`   –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${successCount}`);
    console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback: ${fallbackCount}`);
    console.log(`   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${(totalTime / successCount).toFixed(0)}ms`);
    console.log(`   –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalTime}ms`);
    
    console.log(`\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ fallback —Å–∏—Å—Ç–µ–º—ã:`);
    console.log(`   ‚úÖ –ù–µ—Ç API –∑–∞—Ç—Ä–∞—Ç`);
    console.log(`   ‚úÖ –ù–µ—Ç rate limits`);
    console.log(`   ‚úÖ –ù–µ—Ç quota –ø—Ä–æ–±–ª–µ–º`);
    console.log(`   ‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞`);
    console.log(`   ‚úÖ –ù–∞–¥–µ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`);
    console.log(`   ‚úÖ –í—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞`);
    
    return jobs;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
async function createFakeUsersWithJobs(jobs) {
    console.log(`üë• –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...`);

    const defaultCategory = await prisma.category.findUnique({
        where: { name: '–†–∞–∑–Ω–æ–µ' },
    });

    if (!defaultCategory) {
        console.error('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–∞–∑–Ω–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ `prisma db seed`');
        return;
    }

    for (const job of jobs) {
        const city = await prisma.city.findUnique({ where: { name: job.city } });

        if (!city) {
            console.log(`‚ö†Ô∏è –ì–æ—Ä–æ–¥ "${job.city}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é.`);
            continue;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ-–µ–≤—Ä–µ–π—Å–∫–∏—Ö –∏–º–µ–Ω
        const firstName = Math.random() < 0.5 ? faker.person.firstName() : faker.helpers.arrayElement([
            "–ê–≤—Ä–∞–∞–º", "–ò—Ü—Ö–∞–∫", "–Ø–∫–æ–≤", "–ú–æ—à–µ", "–®–ª–æ–º–æ", "–î–∞–≤–∏–¥", "–≠–ª–∏—ç–∑–µ—Ä", "–ú–µ–Ω–∞—Ö–µ–º", "–ò–µ—Ö—É–¥–∞", "–®–∏–º–æ–Ω",
            "–°–∞—Ä–∞", "–†–∞—Ö–µ–ª—å", "–õ–µ—è", "–ú–∏—Ä–∏–∞–º", "–•–∞–Ω–∞", "–ë–∞—Ç—à–µ–≤–∞", "–ê–¥–∞", "–≠—Å—Ç–µ—Ä", "–¢–∞–º–∞—Ä", "–ù–∞–æ–º–∏"
        ]);
        const lastName = faker.person.lastName();
        const email = faker.internet.email({ firstName, lastName });

        const clerkUserId = `user_${faker.string.uuid()}`;

        // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        const phone = job.phone;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        const salary = `${faker.number.int({ min: 35, max: 50 })}`;

        // üü¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
        const initials = `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
        const imageUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=random&color=fff&size=128`;

        await prisma.user.create({
            data: {
                clerkUserId,
                firstName,
                lastName,
                email,
                imageUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
                jobs: {
                    create: {
                        title: job.title,
                        description: job.description,
                        salary: salary,
                        phone: phone,
                        city: { connect: { id: city.id } },
                        category: { connect: { id: defaultCategory.id } },
                    },
                },
            },
        });
    }

    console.log("üéâ –í—Å–µ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!");
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    try {
        console.log("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ —Å –Ω–∞–¥–µ–∂–Ω–æ–π fallback —Å–∏—Å—Ç–µ–º–æ–π...\n");
        console.log("üí° –ò—Å–ø–æ–ª—å–∑—É–µ–º rule-based –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤");
        console.log("‚úÖ –ù–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç OpenAI API");
        console.log("‚ö° –ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n");
        
        await clearOldData();
        const jobs = await fetchJobDescriptions();
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å –Ω–∞–¥–µ–∂–Ω–æ–π fallback —Å–∏—Å—Ç–µ–º–æ–π
        const jobsWithTitles = await generateJobTitles(jobs);
        
        await createFakeUsersWithJobs(jobsWithTitles);
        
        console.log("\n‚úÖ –°–∫—Ä–∏–ø—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!");
        console.log("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        console.log(`   - –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π: ${jobs.length}`);
        console.log(`   - –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${jobs.filter(j => j.title !== "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").length}`);
        console.log(`   - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ fallback: ${jobs.filter(j => j.title !== "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è").length}`);
        
        console.log("\nüí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:");
        console.log("   - –ù–µ—Ç API –∑–∞—Ç—Ä–∞—Ç");
        console.log("   - –ù–µ—Ç rate limits –∏–ª–∏ quota –ø—Ä–æ–±–ª–µ–º");
        console.log("   - –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞");
        console.log("   - 100% –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å");
        console.log("   - –ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–∑—Ä–∞–∏–ª—å—Å–∫–æ–≥–æ —Ä—ã–Ω–∫–∞");
        
    } catch (error) {
        console.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ:", error);
    } finally {
        await prisma.$disconnect();
    }
}

main().catch(console.error);
