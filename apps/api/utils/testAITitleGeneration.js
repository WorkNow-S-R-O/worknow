import AIJobTitleService from '../services/aiJobTitleService.js';

// Test cases with real job descriptions
const testCases = [
    {
        description: "! –•–û–õ–û–ù /–ö–£–•–ù–Ø –í –û–§–ò–°–ï –ü–û–í–ê–† –í—Å-–ß—Ç 06.00-16.00 –û–ø–ª–∞—Ç–∞: –æ—Ç 45-50 —à–µ–∫/—á–∞—Å –ü—Ä–æ–µ–∑–¥ –æ–ø–ª–∞—á–∏–≤–∞–µ–º –ü–∏—Ç–∞–Ω–∏–µ –µ—Å—Ç—å –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –∏ –∑–Ω–∞–Ω–∏–µ –∏–≤—Ä–∏—Ç–∞ –¢—Ä–µ–±—É—é—Ç—Å—è –¥–µ–≤—É—à–∫–∏ –∏ –º—É–∂—á–∏–Ω—ã !! –û–§–ò–¶–ò–ê–õ–¨–ù–û–ï –¢–†–£–î–û–£–°–¢–†–û–ô–°–¢–í–û!!! –í–ê–ö–ê–ù–°–ò–ò –ü–û –í–°–ï–ú–£ –ò–ó–†–ê–ò–õ–Æ ! –ó–≤–æ–Ω–∏—Ç–µ +972535875519 –∏–ª–∏ –ø–∏—à–∏—Ç–µ WhatsApp +972536232595",
        expected: "–ü–æ–≤–∞—Ä –≤ –æ—Ñ–∏—Å–µ",
        context: { city: "–•–æ–ª–æ–Ω", salary: "45-50" }
    },
    {
        description: "–ë–Ω–µ–π –ë—Ä–∞–∫ –¢—Ä–µ–±—É—é—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å –∏–≤—Ä–∏—Ç–æ–º –†–∞–±–æ—Ç–∞: —Ä–∞—Å–∫–ª–∞–¥–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏ —Ä–∞–±–æ—Ç–∞ –Ω–∞ –∫–∞—Å—Å–µ –û–ø–ª–∞—Ç–∞: 45 —à–µ–∫/—á–∞—Å –ì—Ä–∞—Ñ–∏–∫: ‚Äî –ú–∞–≥–∞–∑–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 6:00 –¥–æ 22:30 ‚Äî –ü—è—Ç–Ω–∏—Ü–∞: 7:00-15:00‚Äî –†–∞–±–æ—Ç–∞ –≤ –¥–≤–µ —Å–º–µ–Ω—ã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ‚Äî –ó–Ω–∞–Ω–∏–µ –∏–≤—Ä–∏—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ ‚Äî –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç—å –û–§–ò–¶–ò–ê–õ–¨–ù–û–ï –¢–†–£–î–û–£–°–¢–†–û–ô–°–¢–í–û +972539396070 –ó–í–û–ù–ò –õ–ò–ë–û –ü–ò–®–ò –í WHATSAPP",
        expected: "–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
        context: { city: "–ë–Ω–µ–π –ë—Ä–∞–∫", salary: "45" }
    },
    {
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è —É–±–æ—Ä—â–∏–∫ –≤ –æ—Ñ–∏—Å –≤ –¢–µ–ª—å-–ê–≤–∏–≤–µ. –†–∞–±–æ—Ç–∞ 5 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é. –û–ø–ª–∞—Ç–∞ 40 —à–µ–∫/—á–∞—Å. –ó–Ω–∞–Ω–∏–µ –∏–≤—Ä–∏—Ç–∞ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.",
        expected: "–£–±–æ—Ä—â–∏–∫ –æ—Ñ–∏—Å–∞",
        context: { city: "–¢–µ–ª—å-–ê–≤–∏–≤", salary: "40" }
    },
    {
        description: "–ò—â–µ–º –≥—Ä—É–∑—á–∏–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥ –≤ –•–∞–π—Ñ–µ. –†–∞–±–æ—Ç–∞ —Å 8:00 –¥–æ 17:00. –û–ø–ª–∞—Ç–∞ 35 —à–µ–∫/—á–∞—Å. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å.",
        expected: "–ì—Ä—É–∑—á–∏–∫",
        context: { city: "–•–∞–π—Ñ–∞", salary: "35" }
    },
    {
        description: "–ù—É–∂–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—å —Å –ø—Ä–∞–≤–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ B. –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ò–∑—Ä–∞–∏–ª—é. –û–ø–ª–∞—Ç–∞ 50 —à–µ–∫/—á–∞—Å. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.",
        expected: "–í–æ–¥–∏—Ç–µ–ª—å",
        context: { salary: "50" }
    },
    {
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ –ò–µ—Ä—É—Å–∞–ª–∏–º–µ. –†–∞–±–æ—Ç–∞ –≤ –≤–µ—á–µ—Ä–Ω–∏–µ —Å–º–µ–Ω—ã. –û–ø–ª–∞—Ç–∞ 45 —à–µ–∫/—á–∞—Å. –ó–Ω–∞–Ω–∏–µ –∏–≤—Ä–∏—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.",
        expected: "–û—Ñ–∏—Ü–∏–∞–Ω—Ç",
        context: { city: "–ò–µ—Ä—É—Å–∞–ª–∏–º", salary: "45" }
    },
    {
        description: "–ò—â–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞ –≤ –º–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã –≤ –ù–µ—Ç–∞–Ω–∏–∏. –†–∞–±–æ—Ç–∞ —Å 9:00 –¥–æ 19:00. –û–ø–ª–∞—Ç–∞ 40 —à–µ–∫/—á–∞—Å. –û–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è.",
        expected: "–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
        context: { city: "–ù–µ—Ç–∞–Ω–∏—è", salary: "40" }
    },
    {
        description: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∫–∞—Å—Å–∏—Ä –≤ —Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä –≤ –ê—à–¥–æ–¥–µ. –†–∞–±–æ—Ç–∞ –≤ –¥–≤–µ —Å–º–µ–Ω—ã. –û–ø–ª–∞—Ç–∞ 42 —à–µ–∫/—á–∞—Å. –ó–Ω–∞–Ω–∏–µ –∏–≤—Ä–∏—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.",
        expected: "–ö–∞—Å—Å–∏—Ä",
        context: { city: "–ê—à–¥–æ–¥", salary: "42" }
    },
    {
        description: "–ù—É–∂–µ–Ω —ç–ª–µ–∫—Ç—Ä–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –û–ø–ª–∞—Ç–∞ 60 —à–µ–∫/—á–∞—Å. –†–∞–±–æ—Ç–∞ –ø–æ –≤—Å–µ–º—É –ò–∑—Ä–∞–∏–ª—é.",
        expected: "–≠–ª–µ–∫—Ç—Ä–∏–∫",
        context: { salary: "60" }
    },
    {
        description: "–ò—â–µ–º —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –∂–∏–ª—ã—Ö –¥–æ–º–∞—Ö. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –û–ø–ª–∞—Ç–∞ 55 —à–µ–∫/—á–∞—Å. –†–∞–±–æ—Ç–∞ –≤ –¢–µ–ª—å-–ê–≤–∏–≤–µ –∏ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç—è—Ö.",
        expected: "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫",
        context: { salary: "55" }
    }
];

// Function to test AI title generation
async function testAITitleGeneration() {
    console.log("ü§ñ Testing AI-Powered Job Title Generation\n");
    
    let successCount = 0;
    let totalCount = testCases.length;
    
    for (const testCase of testCases) {
        try {
            console.log(`\nüìù Testing: ${testCase.description.substring(0, 80)}...`);
            console.log(`üéØ Expected: ${testCase.expected}`);
            
            const result = await AIJobTitleService.generateAITitle(
                testCase.description, 
                testCase.context
            );
            
            console.log(`‚úÖ Generated: "${result.title}"`);
            console.log(`ü§ñ Method: ${result.method}`);
            console.log(`üìä Confidence: ${result.confidence.toFixed(2)}`);
            
            // Check if the generated title is close to expected
            const isSuccess = result.title.toLowerCase().includes(testCase.expected.toLowerCase()) || 
                             testCase.expected.toLowerCase().includes(result.title.toLowerCase()) ||
                             result.confidence > 0.7;
            
            if (isSuccess) {
                successCount++;
                console.log(`‚úÖ Success: ${isSuccess ? 'YES' : 'NO'}`);
            } else {
                console.log(`‚ùå Success: ${isSuccess ? 'YES' : 'NO'}`);
            }
            
            console.log('‚îÄ'.repeat(60));
            
            // Add delay to avoid rate limiting
            await new Promise(resolve => setTimeout(resolve, 500));
            
        } catch (error) {
            console.error(`‚ùå Error testing case:`, error.message);
        }
    }
    
    const successRate = ((successCount / totalCount) * 100).toFixed(2);
    console.log(`\nüìà Results: ${successCount}/${totalCount} tests passed (${successRate}% success rate)`);
    
    if (successRate >= 80) {
        console.log("üéâ Excellent AI title generation performance!");
    } else if (successRate >= 60) {
        console.log("üëç Good AI title generation performance!");
    } else {
        console.log("‚ö†Ô∏è AI title generation needs improvement.");
    }
}

// Function to test single job description
async function testSingleJob(description, context = {}) {
    console.log("ü§ñ Testing Single Job Title Generation\n");
    console.log(`üìù Description: ${description.substring(0, 100)}...`);
    
    try {
        const result = await AIJobTitleService.generateAITitle(description, context);
        
        console.log(`\n‚úÖ Generated Title: "${result.title}"`);
        console.log(`ü§ñ Method: ${result.method}`);
        console.log(`üìä Confidence: ${result.confidence.toFixed(2)}`);
        console.log(`üìã Analysis:`);
        console.log(`   - Has specific keywords: ${result.analysis.hasSpecificKeywords}`);
        console.log(`   - Has location: ${result.analysis.hasLocation}`);
        console.log(`   - Has salary: ${result.analysis.hasSalary}`);
        console.log(`   - Has language requirement: ${result.analysis.hasLanguageRequirement}`);
        console.log(`   - Has experience requirement: ${result.analysis.hasExperienceRequirement}`);
        
        return result;
        
    } catch (error) {
        console.error('‚ùå Error generating title:', error.message);
        return null;
    }
}

// Function to test batch processing
async function testBatchProcessing() {
    console.log("ü§ñ Testing Batch AI Title Generation\n");
    
    const sampleJobs = testCases.map((testCase, index) => ({
        id: index + 1,
        description: testCase.description,
        city: { name: testCase.context.city },
        salary: testCase.context.salary
    }));
    
    try {
        const results = await AIJobTitleService.batchGenerateAITitles(sampleJobs);
        
        console.log(`\nüìä Batch Processing Results:`);
        results.forEach((job, index) => {
            console.log(`${index + 1}. "${job.title}" (${job.titleMethod}, confidence: ${job.titleConfidence.toFixed(2)})`);
        });
        
    } catch (error) {
        console.error('‚ùå Error in batch processing:', error.message);
    }
}

// Run tests if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
    // Test single job first
    await testSingleJob(
        "–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤–∞—Ä –≤ –æ—Ñ–∏—Å –≤ –¢–µ–ª—å-–ê–≤–∏–≤–µ. –û–ø–ª–∞—Ç–∞ 45 —à–µ–∫/—á–∞—Å. –ó–Ω–∞–Ω–∏–µ –∏–≤—Ä–∏—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.",
        { city: "–¢–µ–ª—å-–ê–≤–∏–≤", salary: "45" }
    );
    
    // Then run full test suite
    await testAITitleGeneration();
    
    // Finally test batch processing
    await testBatchProcessing();
}

export { testAITitleGeneration, testSingleJob, testBatchProcessing }; 