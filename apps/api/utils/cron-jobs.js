import cron from 'node-cron';
import stripe from './stripe.js';
import nodemailer from 'nodemailer';
import pkg from '@prisma/client';
const { PrismaClient } = pkg;
import dotenv from 'dotenv';
import { Resend } from 'resend';
import { checkAndSendFilteredNewsletter } from '../services/newsletterService.js';

dotenv.config();
const prisma = new PrismaClient();
const resend = new Resend(process.env.RESEND_API_KEY);

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
  host: "smtp.gmail.com",
  port: 587,
  secure: false, // true –¥–ª—è 465, false –¥–ª—è 587
      auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS,
    },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const checkLowRankedJobs = async () => {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∏–∑–∫–æ...");

  try {
    const jobsPerPage = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const minPage = 3; // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ 3-–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –Ω–∏–∂–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    const jobs = await prisma.job.findMany({
      include: {
        user: true,
      },
      orderBy: [
        { boostedAt: 'desc' },
        { createdAt: 'desc' },
      ],
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    if (jobs.length === 0) {
      console.log("üì© –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏");
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    const pagedJobs = jobs.reduce((acc, job, index) => {
      const page = Math.floor(index / jobsPerPage) + 1;
      if (page >= minPage) {
        acc.push({ ...job, page });
      }
      return acc;
    }, []);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ 3-–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –Ω–∏–∂–µ
    if (pagedJobs.length === 0) {
      console.log("üì© –ù–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ 3-–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –Ω–∏–∂–µ");
      return;
    }

    console.log(`üì© –ì–æ—Ç–æ–≤–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ ${pagedJobs.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö ${minPage}+...`);

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const usersToNotify = new Map();

    pagedJobs.forEach((job) => {
      if (job.user?.email) {
        if (!usersToNotify.has(job.user.email)) {
          usersToNotify.set(job.user.email, []);
        }
        usersToNotify.get(job.user.email).push(job);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (usersToNotify.size === 0) {
      console.log("üì© –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π");
      return;
    }

    console.log(`üì© –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${usersToNotify.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...`);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    for (const [email, jobs] of usersToNotify.entries()) {
      const jobTitles = jobs.map((j) => `- ${j.title} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${j.page})`).join('\n');
      
      const mailOptions = {
        from: `"Worknow Notifications" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: '–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–ø—É—Å—Ç–∏–ª–∏—Å—å –≤–Ω–∏–∑',
        text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${minPage} –∏–ª–∏ –Ω–∏–∂–µ:\n\n${jobTitles}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–Ω—è—Ç—å –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –æ—Ç–∫–ª–∏–∫–æ–≤.\n\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å: https://worknow.co.il/my-advertisements\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ Worknow.`,
      };

      try {
        await transporter.sendMail(mailOptions);
        console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${email} (${jobs.length} –æ–±—ä—è–≤–ª–µ–Ω–∏–π)`);
      } catch (emailError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${email}:`, emailError);
      }
    }

    console.log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ${usersToNotify.size} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º`);

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", error);
  }
};

export const cancelAutoRenewal = async (req, res) => {
  const { clerkUserId } = req.body;

  try {
    const user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user || !user.stripeSubscriptionId) {
      return res.status(404).json({ error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (!user.isAutoRenewal) {
      return res.status(400).json({ error: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ' });
    }

    // üîπ –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ Stripe
    await stripe.subscriptions.update(user.stripeSubscriptionId, {
      cancel_at_period_end: true,
    });

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    await prisma.user.update({
      where: { clerkUserId },
      data: { isAutoRenewal: false },
    });

    // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    console.log(`üì© [DEBUG] –ì–æ—Ç–æ–≤–∏–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ ${user.email}`);


    const mailOptions = {
      // eslint-disable-next-line no-undef
      from: `"Worknow" <${process.env.EMAIL_USER}>`,
      to: user.email,
      subject: "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ",
      text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.firstName || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏. –í–∞—à–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ ${user.premiumEndsAt.toLocaleDateString()}.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å Worknow!`,
    };

    await transporter.sendMail(mailOptions);
    console.log(`üì© –ü–∏—Å—å–º–æ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${user.email}`);

    res.json({ success: true, message: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.' });
  } catch (error) {
    console.error(' –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
};

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–µ 5 –¥–Ω–µ–π –≤ 08:00
cron.schedule('0 8 */5 * *', () => {
  console.log("‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 5 –¥–Ω–µ–π)...");
  checkLowRankedJobs();
}, {
  timezone: "Europe/Moscow",
});

// –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
const disableExpiredPremiums = async () => {
  try {
    const result = await prisma.user.updateMany({
      where: {
        isPremium: true,
        isAutoRenewal: false,
        premiumEndsAt: { lt: new Date() }
      },
      data: { isPremium: false }
    });
    if (result.count > 0) {
      console.log(`‚è∞ –û—Ç–∫–ª—é—á–µ–Ω–æ –ø—Ä–µ–º–∏—É–º–æ–≤: ${result.count}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞:', error);
  }
};

// –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', () => {
  console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤...');
  disableExpiredPremiums();
}, {
  timezone: 'Europe/Prague',
});

// Newsletter automation function
const checkAndSendNewsletter = async () => {
  try {
    console.log("üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...");

    // Get candidates created in the last 24 hours
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1);

    const newCandidates = await prisma.seeker.findMany({
      where: {
        createdAt: {
          gte: yesterday
        },
        isActive: true
      },
      orderBy: { createdAt: 'desc' }
    });

    console.log(`üìß –ù–∞–π–¥–µ–Ω–æ ${newCandidates.length} –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞`);

    if (newCandidates.length >= 5) {
      // Get all active subscribers
      const subscribers = await prisma.newsletterSubscriber.findMany({
        where: { isActive: true }
      });

      if (subscribers.length === 0) {
        console.log("üìß –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏");
        return;
      }

      console.log(`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`);

      // Generate email content
      const emailContent = generateNewsletterContent(newCandidates);
      const emailSubject = `–ù–∞–π–¥–µ–Ω–æ ${newCandidates.length} –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π`;

      // Send emails to all subscribers
      const emailPromises = subscribers.map(subscriber => 
        resend.emails.send({
          from: 'WorkNow <noreply@worknow.com>',
          to: subscriber.email,
          subject: emailSubject,
          html: emailContent
        })
      );

      await Promise.all(emailPromises);

      console.log(`üìß –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`);
    } else {
      console.log(`üìß –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ (${newCandidates.length}/5)`);
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ:", error);
  }
};

// Generate newsletter email content
const generateNewsletterContent = (candidates) => {
  const candidatesHtml = candidates.map(candidate => `
    <div style="margin-bottom: 20px; padding: 15px; border: 1px solid #e0e0e0; border-radius: 8px; background-color: #f9f9f9;">
      <h3 style="margin: 0 0 10px 0; color: #333; font-size: 18px;">
        ${candidate.name} ${candidate.gender ? `(${candidate.gender})` : ''}
      </h3>
      <p style="margin: 5px 0; color: #666;">
        <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${candidate.contact || '–ù–µ —É–∫–∞–∑–∞–Ω'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ì–æ—Ä–æ–¥:</strong> ${candidate.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ó–∞–Ω—è—Ç–æ—Å—Ç—å:</strong> ${candidate.employment || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${candidate.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–û–ø—ã—Ç:</strong> ${candidate.experience || '–ù–µ —É–∫–∞–∑–∞–Ω'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–Ø–∑—ã–∫–∏:</strong> ${candidate.languages ? candidate.languages.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
      </p>
      <p style="margin: 10px 0 0 0; color: #333; font-style: italic;">
        "${candidate.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
      </p>
    </div>
  `).join('');

  return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <h1 style="color: #1976d2; text-align: center; margin-bottom: 30px;">
          WorkNow - –ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏
        </h1>
        
        <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="color: #1976d2; margin: 0 0 10px 0;">
            –î–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ ${candidates.length} –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π
          </h2>
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #333; border-bottom: 2px solid #1976d2; padding-bottom: 10px;">
            –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:
          </h3>
          ${candidatesHtml}
        </div>

        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 8px; margin-top: 30px;">
          <h3 style="color: #333; margin: 0 0 10px 0;">–ù–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏:</h3>
          <p style="margin: 5px 0; color: #666;">
            –û—Ç–∫—Ä—ã—Ç –≤–æ—Ç—Å–∞–ø–ø-—á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ê–≤–æ–¥–∞
          </p>
          <p style="margin: 5px 0; color: #666;">
            –î–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö –ø–æ–ª—É—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è—Ö, –∞–Ω–æ–Ω—Å—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –°–∏—Å—Ç–µ–º—ã, –æ—Ç–∫—Ä—ã—Ç –≤–æ—Ç—Å–∞–ø–ø - —á–∞—Ç. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å !!!
          </p>
        </div>

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
          <p style="color: #666; font-size: 12px; margin: 0;">
            –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Ç–æ–º—É, —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
          </p>
          <p style="color: #666; font-size: 12px; margin: 5px 0;">
            <a href="https://worknow.com/unsubscribe" style="color: #1976d2; text-decoration: none;">
              –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
            </a>
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
};

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00
cron.schedule('0 10 * * *', () => {
  console.log("‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏...");
  checkAndSendNewsletter();
}, {
  timezone: "Europe/Moscow",
});

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', () => {
  console.log("‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...");
  checkAndSendFilteredNewsletter();
}, {
  timezone: "Europe/Moscow",
});

export { disableExpiredPremiums };
export { checkLowRankedJobs };
export { checkAndSendNewsletter };
export { checkAndSendFilteredNewsletter };
