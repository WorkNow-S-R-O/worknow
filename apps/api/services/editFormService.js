import { PrismaClient } from '@prisma/client';
import { containsBadWords, containsLinks } from '../middlewares/validation.js';
import { sendUpdatedJobListToTelegram } from '../utils/telegram.js';

const prisma = new PrismaClient();

export const updateJobService = async (id, { title, salary, cityId, phone, description, categoryId, shuttle, meals, imageUrl }) => {
  let errors = [];
  if (containsBadWords(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");
  if (containsBadWords(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");
  if (containsLinks(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");
  if (containsLinks(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");
  if (errors.length > 0) return { errors };

  try {
    const existingJob = await prisma.job.findUnique({ where: { id: parseInt(id) }, include: { user: true } });
    if (!existingJob) return { error: '–û–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' };

    console.log('üîç updateJobService - Updating job with imageUrl:', imageUrl);
    console.log('üîç updateJobService - Full update data:', {
      title, 
      salary, 
      phone, 
      description, 
      imageUrl,
      cityId,
      categoryId,
      shuttle,
      meals
    });

    const updatedJob = await prisma.job.update({
      where: { id: parseInt(id) },
      data: { 
        title, 
        salary, 
        phone, 
        description, 
        imageUrl, // Add imageUrl to the update data
        city: { connect: { id: parseInt(cityId) } },
        category: { connect: { id: parseInt(categoryId) } },
        shuttle,
        meals
      },
      include: { city: true, user: true, category: true },
    });

    if (updatedJob.user.isPremium) {
      const userJobs = await prisma.job.findMany({ where: { userId: updatedJob.user.id }, include: { city: true } });
      await sendUpdatedJobListToTelegram(updatedJob.user, userJobs);
    }
    return { updatedJob };
  } catch (error) {
    return { error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è', details: error.message };
  }
};