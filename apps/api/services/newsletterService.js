import { PrismaClient } from '@prisma/client';
import { Resend } from 'resend';
import { sendEmail } from '../utils/mailer.js';
import process from 'process';

const prisma = new PrismaClient();

// Debug: Check if RESEND_API_KEY is available
console.log('üîç RESEND_API_KEY available:', !!process.env.RESEND_API_KEY);
console.log(
	'üîç RESEND_API_KEY value:',
	process.env.RESEND_API_KEY
		? process.env.RESEND_API_KEY.substring(0, 10) + '...'
		: 'NOT SET',
);

const resend = new Resend(process.env.RESEND_API_KEY);

/**
 * Send 3 candidates to a newly subscribed user (only once)
 */
export async function sendCandidatesToNewSubscriber(subscriber) {
	try {
		console.log(
			`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É: ${subscriber.email}`,
		);

		// Get 3 most recent active candidates
		const candidates = await prisma.seeker.findMany({
			where: {
				isActive: true,
			},
			orderBy: { createdAt: 'desc' },
			take: 3,
		});

		if (candidates.length === 0) {
			console.log('üìß –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
			return;
		}

		// Generate email content
		const emailContent = generateCandidatesEmailContent(candidates, subscriber);
		const emailSubject = '–ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ —Å —Å–∞–π—Ç–∞ WorkNow';

		// Send email with fallback
		console.log('üìß Attempting to send email via Resend...');
		console.log('üìß From:', 'WorkNow <onboarding@resend.dev>');
		console.log('üìß To:', subscriber.email);
		console.log('üìß Subject:', emailSubject);

		try {
			const result = await resend.emails.send({
				from: 'WorkNow <onboarding@resend.dev>',
				to: subscriber.email,
				subject: emailSubject,
				html: emailContent,
			});

			console.log('üìß Resend API response:', result);
			console.log(
				`üìß Email —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Resend: ${subscriber.email}`,
			);
		} catch (resendError) {
			console.error('‚ùå Resend failed, trying Gmail fallback:', resendError);

			// Fallback to Gmail
			try {
				await sendEmail(subscriber.email, emailSubject, emailContent);
				console.log(
					`üìß Email —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Gmail: ${subscriber.email}`,
				);
			} catch (gmailError) {
				console.error('‚ùå Gmail fallback also failed:', gmailError);
				throw new Error(
					`Failed to send email: Resend error - ${resendError.message}, Gmail error - ${gmailError.message}`,
				);
			}
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', error);
		throw error;
	}
}

/**
 * Generate email content with candidates
 */
function generateCandidatesEmailContent(candidates, subscriber) {
	const candidatesHtml = candidates
		.map(
			(candidate) => `
    <div style="margin-bottom: 20px; padding: 15px; border: 1px solid #e0e0e0; border-radius: 8px; background-color: #f9f9f9;">
      <h3 style="margin: 0 0 10px 0; color: #333; font-size: 18px;">
        ${candidate.name} ${candidate.gender ? `${candidate.gender}` : ''}
      </h3>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ì–æ—Ä–æ–¥:</strong> ${candidate.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ó–∞–Ω—è—Ç–æ—Å—Ç—å:</strong> ${candidate.employment || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${candidate.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      ${candidate.experience ? `<p style="margin: 5px 0; color: #666;"><strong>–û–ø—ã—Ç, –ª–µ—Ç:</strong> ${candidate.experience}</p>` : ''}
      <p style="margin: 5px 0; color: #666;">
        <strong>–Ø–∑—ã–∫–∏:</strong> ${candidate.languages ? candidate.languages.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
      </p>
      <p style="margin: 10px 0 0 0; color: #333; font-style: italic;">
        <strong>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</strong> ${candidate.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
      </p>
    </div>
  `,
		)
		.join('');

	const subscriberName =
		subscriber.firstName && subscriber.lastName
			? `${subscriber.firstName} ${subscriber.lastName}`
			: subscriber.firstName || subscriber.lastName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

	return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <!-- Header with Hebrew text -->
        <div style="background-color: #1976d2; color: white; text-align: center; padding: 20px; border-radius: 8px 8px 0 0; margin: -20px -20px 20px -20px;">
          <h1 style="margin: 0; font-size: 24px;">WORKNOW</h1>
        </div>
        
        <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="color: #1976d2; margin: 0 0 10px 0;">
            –£–≤–∞–∂–∞–µ–º—ã–π/–∞—è ${subscriberName}! –î–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ ${candidates.length} –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.
          </h2>
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #333; border-bottom: 2px solid #1976d2; padding-bottom: 10px;">
            –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:
          </h3>
          ${candidatesHtml}
        </div>

        <div style="background-color: #f5f5f5; padding: 15px; border-radius: 8px; margin-top: 30px;">
          <h3 style="color: #333; margin: 0 0 10px 0;">–ù–∞—à–∏ –Ω–æ–≤–æ—Å—Ç–∏:</h3>
          <p style="margin: 5px 0; color: #666;">
            –û—Ç–∫—Ä—ã—Ç –≤–æ—Ç—Å–∞–ø–ø-—á–∞—Ç –ø—Ä–æ–µ–∫—Ç–∞ –ê–≤–æ–¥–∞
          </p>
          <p style="margin: 5px 0; color: #666;">
            –î–ª—è –≤—Å–µ—Ö –∂–µ–ª–∞—é—â–∏—Ö –ø–æ–ª—É—á–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Å–≤–µ–∂—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è—Ö, –∞–Ω–æ–Ω—Å—ã –∏ –Ω–æ–≤–æ—Å—Ç–∏ –°–∏—Å—Ç–µ–º—ã, –æ—Ç–∫—Ä—ã—Ç –≤–æ—Ç—Å–∞–ø–ø - —á–∞—Ç. –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å !!!
          </p>
          <p style="margin: 5px 0; color: #666;">
            <a href="#" style="color: #1976d2; text-decoration: none;">–ø–µ—Ä–µ–π—Ç–∏ -></a>
          </p>
        </div>

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
          <p style="color: #666; font-size: 12px; margin: 0;">
            –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Ç–æ–º—É, —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
          </p>
          <p style="color: #666; font-size: 12px; margin: 5px 0;">
            For unsubscribe click here: 
            <a href="https://worknow.co.il/newsletter" style="color: #1976d2; text-decoration: none;">
              https://worknow.co.il/newsletter
            </a>
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
}

/**
 * Send candidates to existing subscribers (for testing or manual trigger)
 */
export async function sendCandidatesToSubscribers(subscriberIds = null) {
	try {
		console.log('üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...');

		// Get subscribers
		const whereClause = subscriberIds
			? { id: { in: subscriberIds }, isActive: true }
			: { isActive: true };

		const subscribers = await prisma.newsletterSubscriber.findMany({
			where: whereClause,
		});

		if (subscribers.length === 0) {
			console.log('üìß –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
			return;
		}

		// Get 3 most recent active candidates
		const candidates = await prisma.seeker.findMany({
			where: {
				isActive: true,
			},
			orderBy: { createdAt: 'desc' },
			take: 3,
		});

		if (candidates.length === 0) {
			console.log('üìß –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
			return;
		}

		console.log(
			`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${candidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`,
		);

		// Send emails to all subscribers with fallback
		const emailPromises = subscribers.map(async (subscriber) => {
			const emailContent = generateCandidatesEmailContent(
				candidates,
				subscriber,
			);
			const emailSubject = '–ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ —Å —Å–∞–π—Ç–∞ WorkNow';

			try {
				const result = await resend.emails.send({
					from: 'WorkNow <onboarding@resend.dev>',
					to: subscriber.email,
					subject: emailSubject,
					html: emailContent,
				});
				console.log(`üìß Email sent via Resend to: ${subscriber.email}`);
				return result;
			} catch (resendError) {
				console.error(
					`‚ùå Resend failed for ${subscriber.email}, trying Gmail fallback:`,
					resendError,
				);

				// Fallback to Gmail
				try {
					await sendEmail(subscriber.email, emailSubject, emailContent);
					console.log(`üìß Email sent via Gmail to: ${subscriber.email}`);
				} catch (gmailError) {
					console.error(
						`‚ùå Gmail fallback also failed for ${subscriber.email}:`,
						gmailError,
					);
					throw new Error(
						`Failed to send email to ${subscriber.email}: Resend error - ${resendError.message}, Gmail error - ${gmailError.message}`,
					);
				}
			}
		});

		await Promise.all(emailPromises);

		console.log(
			`üìß –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º`,
		);
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º:', error);
		throw error;
	}
}

/**
 * Send filtered candidates to subscribers when 3 new candidates are added
 */
export async function sendFilteredCandidatesToSubscribers() {
	try {
		console.log(
			'üìß Checking for new candidates and sending filtered emails...',
		);

		// Get all active subscribers
		const subscribers = await prisma.newsletterSubscriber.findMany({
			where: { isActive: true },
		});

		if (subscribers.length === 0) {
			console.log('üìß –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
			return;
		}

		// Get all active candidates
		const allCandidates = await prisma.seeker.findMany({
			where: { isActive: true },
			orderBy: { createdAt: 'desc' },
		});

		if (allCandidates.length === 0) {
			console.log('üìß –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
			return;
		}

		console.log(
			`üìß –ù–∞–π–¥–µ–Ω–æ ${allCandidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,
		);

		// Send filtered candidates to each subscriber
		for (const subscriber of subscribers) {
			try {
				const filteredCandidates = filterCandidatesByPreferences(
					allCandidates,
					subscriber,
				);

				if (filteredCandidates.length > 0) {
					// Take up to 3 candidates
					const candidatesToSend = filteredCandidates.slice(0, 3);

					const emailContent = generateCandidatesEmailContent(
						candidatesToSend,
						subscriber,
					);
					const emailSubject = '–ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ —Å —Å–∞–π—Ç–∞ WorkNow';

					console.log(
						`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ${candidatesToSend.length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫—É: ${subscriber.email}`,
					);

					// Send email with fallback
					try {
						await resend.emails.send({
							from: 'WorkNow <onboarding@resend.dev>',
							to: subscriber.email,
							subject: emailSubject,
							html: emailContent,
						});

						console.log(
							`üìß Email —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Resend: ${subscriber.email}`,
						);
					} catch (resendError) {
						console.error(
							`‚ùå Resend failed for ${subscriber.email}, trying Gmail fallback:`,
							resendError,
						);

						// Fallback to Gmail
						try {
							await sendEmail(subscriber.email, emailSubject, emailContent);
							console.log(
								`üìß Email —Å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Gmail: ${subscriber.email}`,
							);
						} catch (gmailError) {
							console.error(
								`‚ùå Gmail fallback also failed for ${subscriber.email}:`,
								gmailError,
							);
						}
					}
				} else {
					console.log(
						`üìß –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: ${subscriber.email}`,
					);
				}
			} catch (error) {
				console.error(
					`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫—É ${subscriber.email}:`,
					error,
				);
			}
		}

		console.log('üìß –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', error);
		throw error;
	}
}

/**
 * Filter candidates based on subscriber preferences
 */
function filterCandidatesByPreferences(candidates, subscriber) {
	let filteredCandidates = [...candidates];

	// Filter by cities
	if (subscriber.preferredCities && subscriber.preferredCities.length > 0) {
		filteredCandidates = filteredCandidates.filter((candidate) =>
			subscriber.preferredCities.some(
				(city) =>
					candidate.city &&
					candidate.city.toLowerCase().includes(city.toLowerCase()),
			),
		);
	}

	// Filter by categories
	if (
		subscriber.preferredCategories &&
		subscriber.preferredCategories.length > 0
	) {
		filteredCandidates = filteredCandidates.filter((candidate) =>
			subscriber.preferredCategories.some(
				(category) =>
					candidate.category &&
					candidate.category.toLowerCase().includes(category.toLowerCase()),
			),
		);
	}

	// Filter by employment type
	if (
		subscriber.preferredEmployment &&
		subscriber.preferredEmployment.length > 0
	) {
		filteredCandidates = filteredCandidates.filter((candidate) =>
			subscriber.preferredEmployment.some(
				(employment) =>
					candidate.employment &&
					candidate.employment.toLowerCase().includes(employment.toLowerCase()),
			),
		);
	}

	// Filter by languages
	if (
		subscriber.preferredLanguages &&
		subscriber.preferredLanguages.length > 0
	) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) =>
				candidate.languages &&
				candidate.languages.some((lang) =>
					subscriber.preferredLanguages.some((prefLang) =>
						lang.toLowerCase().includes(prefLang.toLowerCase()),
					),
				),
		);
	}

	// Filter by gender
	if (subscriber.preferredGender) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) =>
				candidate.gender &&
				candidate.gender.toLowerCase() ===
					subscriber.preferredGender.toLowerCase(),
		);
	}

	// Filter by document types
	if (
		subscriber.preferredDocumentTypes &&
		subscriber.preferredDocumentTypes.length > 0
	) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) =>
				candidate.documents &&
				subscriber.preferredDocumentTypes.some((docType) =>
					candidate.documents.toLowerCase().includes(docType.toLowerCase()),
				),
		);
	}

	// Filter by demanded status
	if (subscriber.onlyDemanded) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) => candidate.isDemanded === true,
		);
	}

	console.log(
		`üìß –ü–æ–¥–ø–∏—Å—á–∏–∫ ${subscriber.email}: ${filteredCandidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ ${candidates.length} –æ–±—â–∏—Ö`,
	);

	return filteredCandidates;
}

/**
 * Check if we should send emails (triggered every 3rd new candidate)
 * DISABLED: This duplicate notification logic has been moved to candidateNotificationService.js
 * to prevent duplicate emails. This function now only handles newsletter subscriptions.
 */
export async function checkAndSendFilteredNewsletter() {
	try {
		console.log(
			'üìß Newsletter service: Duplicate notification logic disabled to prevent duplicate emails',
		);
		console.log(
			'üìß Candidate notifications are now handled exclusively by candidateNotificationService.js',
		);

		// This function no longer sends candidate notifications to prevent duplicates
		// Candidate notifications are handled by candidateNotificationService.js
	} catch (error) {
		console.error('‚ùå Error in newsletter service:', error);
	}
}

// DISABLED: sendNewCandidatesNotification function moved to candidateNotificationService.js to prevent duplicate emails

// DISABLED: generateNewCandidatesNotificationEmail function moved to candidateNotificationService.js to prevent duplicate emails
