import { PrismaClient } from '@prisma/client';
import { Resend } from 'resend';
import { sendEmail } from '../utils/mailer.js';
import process from 'process';

const prisma = new PrismaClient();
const resend = new Resend(process.env.RESEND_API_KEY);

/**
 * Send 3 latest candidates to a newly subscribed user (only once)
 */
export async function sendInitialCandidatesToNewSubscriber(subscriber) {
	try {
		console.log(
			`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–æ–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É: ${subscriber.email}`,
		);

		const candidates = await prisma.seeker.findMany({
			where: { isActive: true },
			orderBy: { createdAt: 'desc' },
			take: 3,
		});

		if (candidates.length === 0) {
			console.log('üìß –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏');
			return;
		}

		const emailContent = generateInitialCandidatesEmail(candidates, subscriber);
		const emailSubject = '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∏ –ø–µ—Ä–≤—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å WorkNow';

		try {
			await resend.emails.send({
				from: 'WorkNow <onboarding@resend.dev>',
				to: subscriber.email,
				subject: emailSubject,
				html: emailContent,
			});
			console.log(
				`üìß Email —Å –ø–µ—Ä–≤—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: ${subscriber.email}`,
			);
		} catch (resendError) {
			console.error('‚ùå Resend failed, trying Gmail fallback:', resendError);
			await sendEmail(subscriber.email, emailSubject, emailContent);
			console.log(
				`üìß Email —Å –ø–µ—Ä–≤—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ Gmail: ${subscriber.email}`,
			);
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–µ—Ä–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:', error);
		throw error;
	}
}

/**
 * Check if we should send notifications about new candidates
 * Only triggers when exactly 3 new candidates are added since last notification
 * This is the SINGLE source of truth for candidate notifications
 */
export async function checkAndSendNewCandidatesNotification() {
	try {
		console.log(
			'üìß –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö...',
		);

		// Get the current total count of active candidates
		const currentCandidateCount = await prisma.seeker.count({
			where: { isActive: true },
		});

		console.log(`üìß –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${currentCandidateCount}`);

		// Simple approach: only send notifications if we have exactly 3, 6, 9, etc. candidates
		// AND the most recent candidate was created recently (within last 5 minutes)
		const mostRecentCandidate = await prisma.seeker.findFirst({
			where: { isActive: true },
			orderBy: { createdAt: 'desc' },
		});

		if (!mostRecentCandidate) {
			console.log('üìß –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
			return;
		}

		// Check if the most recent candidate was created recently (within last 5 minutes)
		const fiveMinutesAgo = new Date(Date.now() - 5 * 60 * 1000);
		const isRecent = mostRecentCandidate.createdAt > fiveMinutesAgo;

		if (!isRecent) {
			console.log(
				'üìß –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã',
			);
			return;
		}

		// Only send notification if total count is divisible by 3 AND candidate is recent
		if (
			currentCandidateCount > 0 &&
			currentCandidateCount % 3 === 0 &&
			isRecent
		) {
			console.log(
				`üìß –¢—Ä–∏–≥–≥–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏: ${currentCandidateCount} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–¥–µ–ª–∏—Ç—Å—è –Ω–∞ 3) –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ–¥–∞–≤–Ω–∏–π`,
			);

			// Get the 3 most recent candidates
			const recentCandidates = await prisma.seeker.findMany({
				where: { isActive: true },
				orderBy: { createdAt: 'desc' },
				take: 3,
			});

			if (recentCandidates.length > 0) {
				console.log(
					`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ ${recentCandidates.length} –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö`,
				);
				await sendNewCandidatesNotification(recentCandidates);
				console.log(
					`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è ${currentCandidateCount} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤`,
				);
			}
		} else {
			console.log(
				`üìß –¢—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${currentCandidateCount} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –Ω–µ–¥–∞–≤–Ω–∏–π: ${isRecent}`,
			);
		}
	} catch (error) {
		console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
	}
}

/**
 * Send notification about new candidates to all active subscribers
 */
async function sendNewCandidatesNotification(newCandidates) {
	try {
		console.log(
			'üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º...',
		);

		const subscribers = await prisma.newsletterSubscriber.findMany({
			where: { isActive: true },
		});

		if (subscribers.length === 0) {
			console.log('üìß –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏');
			return;
		}

		console.log(
			`üìß –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ ${newCandidates.length} –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö`,
		);

		for (const subscriber of subscribers) {
			try {
				const filteredCandidates = filterCandidatesByPreferences(
					newCandidates,
					subscriber,
				);

				if (filteredCandidates.length > 0) {
					const emailContent = generateNewCandidatesNotificationEmail(
						filteredCandidates,
						subscriber,
					);
					const emailSubject = '–ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ WorkNow';

					try {
						await resend.emails.send({
							from: 'WorkNow <onboarding@resend.dev>',
							to: subscriber.email,
							subject: emailSubject,
							html: emailContent,
						});
						console.log(
							`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Resend: ${subscriber.email}`,
						);
					} catch (resendError) {
						await sendEmail(subscriber.email, emailSubject, emailContent);
						console.log(
							`üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Gmail: ${subscriber.email}`,
						);
					}
				}
			} catch (error) {
				console.error(
					`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É ${subscriber.email}:`,
					error,
				);
			}
		}

		console.log('üìß –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
	} catch (error) {
		console.error(
			'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞—Ö:',
			error,
		);
		throw error;
	}
}

/**
 * Filter candidates based on subscriber preferences
 */
function filterCandidatesByPreferences(candidates, subscriber) {
	let filteredCandidates = [...candidates];

	if (subscriber.preferredCities && subscriber.preferredCities.length > 0) {
		filteredCandidates = filteredCandidates.filter((candidate) =>
			subscriber.preferredCities.some(
				(city) =>
					candidate.city &&
					candidate.city.toLowerCase().includes(city.toLowerCase()),
			),
		);
	}

	if (
		subscriber.preferredCategories &&
		subscriber.preferredCategories.length > 0
	) {
		filteredCandidates = filteredCandidates.filter((candidate) =>
			subscriber.preferredCategories.some(
				(category) =>
					candidate.category &&
					candidate.category.toLowerCase().includes(category.toLowerCase()),
			),
		);
	}

	if (
		subscriber.preferredEmployment &&
		subscriber.preferredEmployment.length > 0
	) {
		filteredCandidates = filteredCandidates.filter((candidate) =>
			subscriber.preferredEmployment.some(
				(employment) =>
					candidate.employment &&
					candidate.employment.toLowerCase().includes(employment.toLowerCase()),
			),
		);
	}

	if (
		subscriber.preferredLanguages &&
		subscriber.preferredLanguages.length > 0
	) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) =>
				candidate.languages &&
				candidate.languages.some((lang) =>
					subscriber.preferredLanguages.some((prefLang) =>
						lang.toLowerCase().includes(prefLang.toLowerCase()),
					),
				),
		);
	}

	if (subscriber.preferredGender) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) =>
				candidate.gender &&
				candidate.gender.toLowerCase() ===
					subscriber.preferredGender.toLowerCase(),
		);
	}

	if (
		subscriber.preferredDocumentTypes &&
		subscriber.preferredDocumentTypes.length > 0
	) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) =>
				candidate.documents &&
				subscriber.preferredDocumentTypes.some((docType) =>
					candidate.documents.toLowerCase().includes(docType.toLowerCase()),
				),
		);
	}

	if (subscriber.onlyDemanded) {
		filteredCandidates = filteredCandidates.filter(
			(candidate) => candidate.isDemanded === true,
		);
	}

	console.log(
		`üìß –ü–æ–¥–ø–∏—Å—á–∏–∫ ${subscriber.email}: ${filteredCandidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ ${candidates.length} –æ–±—â–∏—Ö`,
	);

	return filteredCandidates;
}

/**
 * Generate email content for initial subscription (first 3 candidates)
 */
function generateInitialCandidatesEmail(candidates, subscriber) {
	const candidatesHtml = candidates
		.map(
			(candidate) => `
    <div style="margin-bottom: 20px; padding: 15px; border: 1px solid #e0e0e0; border-radius: 8px; background-color: #f9f9f9;">
      <h3 style="margin: 0 0 10px 0; color: #333; font-size: 18px;">
        <strong>–°–æ–∏—Å–∫–∞—Ç–µ–ª—å:</strong> ${candidate.name} ${candidate.gender ? `${candidate.gender}` : ''}
      </h3>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ì–æ—Ä–æ–¥:</strong> ${candidate.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ó–∞–Ω—è—Ç–æ—Å—Ç—å:</strong> ${candidate.employment || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${candidate.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–Ø–∑—ã–∫–∏:</strong> ${candidate.languages ? candidate.languages.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
      </p>
      <p style="margin: 10px 0 0 0; color: #333; font-style: italic;">
        <strong>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</strong> ${candidate.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
      </p>
    </div>
  `,
		)
		.join('');

	const subscriberName =
		subscriber.firstName && subscriber.lastName
			? `${subscriber.firstName} ${subscriber.lastName}`
			: subscriber.firstName || subscriber.lastName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

	return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ WorkNow!</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <div style="background-color: #1976d2; color: white; text-align: center; padding: 20px; border-radius: 8px 8px 0 0; margin: -20px -20px 20px -20px;">
          <h1 style="margin: 0; font-size: 24px;">WORKNOW</h1>
        </div>
        
        <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="color: #1976d2; margin: 0 0 10px 0;">
            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${subscriberName}! –î–ª—è –≤–∞—Å –Ω–∞–π–¥–µ–Ω–æ ${candidates.length} —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.
          </h2>
          <p style="margin: 5px 0; color: #666;">
            –≠—Ç–æ –≤–∞—à –ø–µ—Ä–≤—ã–π email —Å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏. –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è—Ö –∫–∞–∂–¥—ã–µ 3 –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
          </p>
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #333; border-bottom: 2px solid #1976d2; padding-bottom: 10px;">
            –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π:
          </h3>
          ${candidatesHtml}
        </div>

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
          <p style="color: #666; font-size: 12px; margin: 0;">
            –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Ç–æ–º—É, —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.
          </p>
          <p style="color: #666; font-size: 12px; margin: 5px 0;">
            For unsubscribe click here: 
            <a href="https://worknow.co.il/newsletter" style="color: #1976d2; text-decoration: none;">
              https://worknow.co.il/newsletter
            </a>
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
}

/**
 * Generate email content for new candidates notification
 */
function generateNewCandidatesNotificationEmail(candidates, subscriber) {
	const candidatesHtml = candidates
		.map(
			(candidate) => `
    <div style="margin-bottom: 20px; padding: 15px; border: 1px solid #e0e0e0; border-radius: 8px; background-color: #f9f9f9;">
      <h3 style="margin: 0 0 10px 0; color: #333; font-size: 18px;">
        <strong>–ù–æ–≤—ã–π —Å–æ–∏—Å–∫–∞—Ç–µ–ª—å:</strong> ${candidate.name} ${candidate.gender ? `${candidate.gender}` : ''}
      </h3>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ì–æ—Ä–æ–¥:</strong> ${candidate.city || '–ù–µ —É–∫–∞–∑–∞–Ω'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ó–∞–Ω—è—Ç–æ—Å—Ç—å:</strong> ${candidate.employment || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> ${candidate.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
      </p>
      <p style="margin: 5px 0; color: #666;">
        <strong>–Ø–∑—ã–∫–∏:</strong> ${candidate.languages ? candidate.languages.join(', ') : '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
      </p>
      <p style="margin: 10px 0 0 0; color: #333; font-style: italic;">
        <strong>–û–±—ä—è–≤–ª–µ–Ω–∏–µ:</strong> ${candidate.description || '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}
      </p>
    </div>
  `,
		)
		.join('');

	const subscriberName =
		subscriber.firstName && subscriber.lastName
			? `${subscriber.firstName} ${subscriber.lastName}`
			: subscriber.firstName || subscriber.lastName || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

	return `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>–ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã</title>
    </head>
    <body style="font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px;">
      <div style="background-color: #ffffff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
        <div style="background-color: #1976d2; color: white; text-align: center; padding: 20px; border-radius: 8px 8px 0 0; margin: -20px -20px 20px -20px;">
          <h1 style="margin: 0; font-size: 24px;">WORKNOW</h1>
        </div>
        
        <div style="background-color: #e3f2fd; padding: 15px; border-radius: 8px; margin-bottom: 20px;">
          <h2 style="color: #1976d2; margin: 0 0 10px 0;">
            –£–≤–∞–∂–∞–µ–º—ã–π/–∞—è ${subscriberName}! –ù–∞ —Å–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ ${candidates.length} –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π.
          </h2>
          <p style="margin: 5px 0; color: #666;">
            –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –Ω–∞ —Å–∞–π—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ 3 –Ω–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–∞.
          </p>
        </div>

        <div style="margin-bottom: 30px;">
          <h3 style="color: #333; border-bottom: 2px solid #1976d2; padding-bottom: 10px;">
            –ù–æ–≤—ã–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–∏:
          </h3>
          ${candidatesHtml}
        </div>

        <div style="text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #e0e0e0;">
          <p style="color: #666; font-size: 12px; margin: 0;">
            –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Ç–æ–º—É, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–æ–∏—Å–∫–∞—Ç–µ–ª—è—Ö.
          </p>
          <p style="color: #666; font-size: 12px; margin: 5px 0;">
            For unsubscribe click here: 
            <a href="https://worknow.co.il/newsletter" style="color: #1976d2; text-decoration: none;">
              https://worknow.co.il/newsletter
            </a>
          </p>
        </div>
      </div>
    </body>
    </html>
  `;
}
