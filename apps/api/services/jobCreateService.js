import stringSimilarity from "string-similarity";
import { containsBadWords, containsLinks } from '../middlewares/validation.js';
import { sendNewJobNotificationToTelegram } from '../utils/telegram.js';
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient()

const MAX_JOBS_FREE_USER = 5;
const MAX_JOBS_PREMIUM_USER = 10;

export const createJobService = async ({ title, salary, cityId, categoryId, phone, description, userId, shuttle, meals, imageUrl }) => {
  let errors = [];

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ —Å—Å—ã–ª–∫–∏
  if (containsBadWords(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");
  if (containsBadWords(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞.");
  if (containsLinks(title)) errors.push("–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");
  if (containsLinks(description)) errors.push("–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏.");
  
  if (errors.length > 0) return { errors };

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const existingUser = await prisma.user.findUnique({
    where: { clerkUserId: userId },
    include: { jobs: { orderBy: { createdAt: 'desc' }, take: 1 } },
  });

  if (!existingUser) return { error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
  const existingJobs = await prisma.job.findMany({
    where: { userId: existingUser.id },
    select: { title: true, description: true }
  });

  const isDuplicate = existingJobs.some(job =>
    stringSimilarity.compareTwoStrings(job.title, title) > 0.9 &&
    stringSimilarity.compareTwoStrings(job.description, description) > 0.9
  );

  if (isDuplicate) return { error: "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ. –ò–∑–º–µ–Ω–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ." };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const jobCount = await prisma.job.count({ where: { userId: existingUser.id } });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª–∏–º–∏—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
  const isPremium = existingUser.isPremium || existingUser.premiumDeluxe;
  const maxJobs = isPremium ? MAX_JOBS_PREMIUM_USER : MAX_JOBS_FREE_USER;
  
  if (jobCount >= maxJobs) {
    if (isPremium) {
      return { error: `–í—ã —É–∂–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ ${MAX_JOBS_PREMIUM_USER} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.` };
    } else {
      return { 
        error: `–í—ã —É–∂–µ —Ä–∞–∑–º–µ—Å—Ç–∏–ª–∏ ${MAX_JOBS_FREE_USER} –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –î–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Premium —Ç–∞—Ä–∏—Ñ.`,
        upgradeRequired: true 
      };
    }
  }

  console.log('üîç createJobService - Creating job with imageUrl:', imageUrl);
  console.log('üîç createJobService - Full data object:', {
    title,
    salary,
    phone,
    description,
    shuttle,
    meals,
    imageUrl,
    cityId,
    categoryId,
    userId
  });
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
  const job = await prisma.job.create({
    data: {
      title,
      salary,
      phone,
      description,
      shuttle,
      meals,
      imageUrl,
      city: { connect: { id: parseInt(cityId) } },
      category: { connect: { id: parseInt(categoryId) } },
      user: { connect: { id: existingUser.id } }
    },
    include: { city: true, user: true, category: true },
  });

  console.log('üîç createJobService - Job created successfully:', {
    id: job.id,
    title: job.title,
    imageUrl: job.imageUrl
  });

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
  if (existingUser.isPremium) {
    await sendNewJobNotificationToTelegram(existingUser, job);
  }

  return { job };
};
