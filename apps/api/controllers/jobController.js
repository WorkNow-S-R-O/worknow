import { getJobByIdService } from "../services/getJobById.js";
import { createJobService } from "../services/createJobService.js";

export const getJobById = async (req, res) => {
  const { id } = req.params;

  if (!id || isNaN(Number(id))) {
    return res.status(400).json({ error: "ID –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º" });
  }

  try {
    const result = await getJobByIdService(Number(id)); // –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ

    if (result.error) {
      return res.status(404).json({ error: result.error });
    }

    console.log('üîç getJobById - Job data:', result.job);
    res.status(200).json(result.job);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è", details: error.message });
  }
};

export const createJob = async (req, res) => {
  const jobData = req.body;

  try {
    const job = await createJobService(jobData);
    res.status(201).json(job);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è", details: error.message });
  }
};
