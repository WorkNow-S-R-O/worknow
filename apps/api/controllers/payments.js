import stripe from '../utils/stripe.js';
import { PrismaClient } from '@prisma/client';
import { sendTelegramNotification } from '../utils/telegram.js';
import { CLERK_SECRET_KEY } from '../config/clerkConfig.js';
import { sendPremiumDeluxeWelcomeEmail, sendProWelcomeEmail } from '../services/premiumEmailService.js';
import fetch from 'node-fetch';
import process from 'process';
const prisma = new PrismaClient();

// ‚úÖ URL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
// eslint-disable-next-line no-undef
const FRONTEND_URL = process.env.NODE_ENV === 'development' 
  ? "http://localhost:3000" 
  : (process.env.FRONTEND_URL || "https://worknowjob.com");

export const createCheckoutSession = async (req, res) => {
  const { clerkUserId, priceId } = req.body;

  if (!clerkUserId) {
    return res.status(400).json({ error: 'clerkUserId is required' });
  }

  let user, finalPriceId;

  try {
    // üîπ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user || !user.email) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç email' });
    }

    // ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    const successUrl = `${FRONTEND_URL}/success?session_id={CHECKOUT_SESSION_ID}`;
    const cancelUrl = `${FRONTEND_URL}/cancel`;

    // üîπ –í—ã–±–∏—Ä–∞–µ–º –Ω—É–∂–Ω—ã–π priceId
    const defaultPriceId = 'price_1Qt63NCOLiDbHvw13PRhpenX'; // Test mode recurring subscription price ID
    finalPriceId = priceId || defaultPriceId;

    // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ price ID –≤ Stripe
    try {
      await stripe.prices.retrieve(finalPriceId);
    } catch {
      // Fallback to default price ID
      finalPriceId = defaultPriceId;
    }

    // üîπ –°–æ–∑–¥–∞–µ–º Stripe Checkout Session
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      mode: 'subscription',
      customer_email: user.email,
      line_items: [
        {
          price: finalPriceId,
          quantity: 1,
        },
      ],
      success_url: successUrl,
      cancel_url: cancelUrl,
      metadata: { clerkUserId, priceId: finalPriceId },
    });

    res.json({ url: session.url });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Checkout Session:', error);
    
    // Provide more specific error messages
    if (error.type === 'StripeInvalidRequestError' && error.message.includes('price')) {
      res.status(400).json({ error: `–ù–µ–≤–µ—Ä–Ω—ã–π price ID: ${priceId}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.` });
    } else {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏' });
    }
  }
};

export const activatePremium = async (req, res) => {
  const { sessionId } = req.body;

  console.log('üîç activatePremium called with sessionId:', sessionId);

  try {
    const session = await stripe.checkout.sessions.retrieve(sessionId);
    const clerkUserId = session.metadata.clerkUserId; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const subscriptionId = session.subscription; // ID –ø–æ–¥–ø–∏—Å–∫–∏ –≤ Stripe
    const priceId = session.metadata.priceId;
    
    console.log('üîç Activating premium with session data:', {
      sessionId,
      clerkUserId,
      subscriptionId,
      priceId,
      paymentStatus: session.payment_status
    });

    if (session.payment_status === 'paid') {
              // Set premiumDeluxe flag for Deluxe subscriptions only (not Pro)
              const premiumDeluxe = priceId === 'price_1RfHjiCOLiDbHvw1repgIbnK' || priceId === 'price_1Rfli2COLiDbHvw1xdMaguLf' || priceId === 'price_1RqXuoCOLiDbHvw1LLew4Mo8' || priceId === 'price_1RqXveCOLiDbHvw18RQxj2g6';
        
        console.log('üîç Updating user with premium data:', {
          clerkUserId,
          priceId,
          premiumDeluxe,
          willSetPremiumDeluxe: premiumDeluxe
        });
        
        const user = await prisma.user.update({
          where: { clerkUserId },
          data: {
            isPremium: true,
            premiumEndsAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            isAutoRenewal: !!subscriptionId,
            stripeSubscriptionId: subscriptionId || null,
            premiumDeluxe: premiumDeluxe,
          },
          include: { jobs: { include: { city: true } } }, // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        });
        
        // User updated successfully

      // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
      await sendTelegramNotification(user, user.jobs);

      // –ï—Å–ª–∏ deluxe ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ email
      // Deluxe price IDs: price_1RfHjiCOLiDbHvw1repgIbnK, price_1Rfli2COLiDbHvw1xdMaguLf, price_1RqXuoCOLiDbHvw1LLew4Mo8, price_1RqXveCOLiDbHvw18RQxj2g6
      // Pro price ID: price_1Qt63NCOLiDbHvw13PRhpenX (excluded from deluxe condition)
              if (priceId === 'price_1RfHjiCOLiDbHvw1repgIbnK' || priceId === 'price_1Rfli2COLiDbHvw1xdMaguLf' || priceId === 'price_1RqXuoCOLiDbHvw1LLew4Mo8' || priceId === 'price_1RqXveCOLiDbHvw18RQxj2g6') {
        // –ú–æ–∂–Ω–æ –∫–∞—Å—Ç–æ–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await prisma.message.create({
          data: {
            clerkUserId,
            title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Premium Deluxe!',
            body: '–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É: <a href="mailto:peterbaikov12@gmail.com">peterbaikov12@gmail.com</a>',
            type: 'system',
          }
        });
        
        // Send Premium Deluxe welcome email
        try {
          const userName = user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : '';
          await sendPremiumDeluxeWelcomeEmail(user.email, userName);
          console.log('‚úÖ Premium Deluxe welcome email sent successfully to:', user.email);
        } catch (emailError) {
          console.error('‚ùå Failed to send Premium Deluxe welcome email:', emailError);
          // Don't fail the entire process if email fails
        }
      } else {
        // Pro subscription ‚Äî –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const title = '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É Pro –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ WorkNow!';
        const body = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!<br><br>
          –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ Pro –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ WorkNow.<br>
          –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.<br>
          <b>–ß–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å.</b><br><br>
          –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!`;
        await prisma.message.create({
          data: {
            clerkUserId,
            title,
            body,
            type: 'system',
          }
        });
        
        // Send Pro welcome email
        try {
          const userName = user.firstName ? `${user.firstName} ${user.lastName || ''}`.trim() : '';
          await sendProWelcomeEmail(user.email, userName);
          console.log('‚úÖ Pro welcome email sent successfully to:', user.email);
        } catch (emailError) {
          console.error('‚ùå Failed to send Pro welcome email:', emailError);
          // Don't fail the entire process if email fails
        }
      }

      // --- –û–±–Ω–æ–≤–ª—è–µ–º publicMetadata –≤ Clerk ---
      const publicMetadata = {
        isPremium: true,
        premiumDeluxe: priceId === 'price_1RfHjiCOLiDbHvw1repgIbnK' || priceId === 'price_1Rfli2COLiDbHvw1xdMaguLf' || priceId === 'price_1RqXuoCOLiDbHvw1LLew4Mo8' || priceId === 'price_1RqXveCOLiDbHvw18RQxj2g6',
      };
      await fetch(`https://api.clerk.com/v1/users/${clerkUserId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${CLERK_SECRET_KEY}`,
        },
        body: JSON.stringify({ public_metadata: publicMetadata }),
      });
      // --- –∫–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Clerk ---

      res.json({ success: true });
    } else {
      res.status(400).json({ error: '–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª' });
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–µ–º–∏—É–º–∞' });
  }
};

export const cancelAutoRenewal = async (req, res) => {

  const { clerkUserId } = req.body;

  try {
    const user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user) {
      console.error("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    if (!user.isAutoRenewal) {
      console.warn("‚ö†Ô∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.");
      return res.status(400).json({ error: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ' });
    }

    if (!user.stripeSubscriptionId) {
      // –ù–µ—Ç Stripe-–ø–æ–¥–ø–∏—Å–∫–∏, –Ω–æ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º –≤ –±–∞–∑–µ
      console.warn(`‚ö†Ô∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.email} –Ω–µ—Ç stripeSubscriptionId, –Ω–æ isAutoRenewal=true. –û—Ç–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –±–∞–∑–µ.`);
      await prisma.user.update({
        where: { clerkUserId },
        data: { isAutoRenewal: false },
      });
      return res.json({ success: true, message: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ (–±–µ–∑ Stripe).' });
    }

    // üîπ –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ Stripe
    await stripe.subscriptions.update(user.stripeSubscriptionId, {
      cancel_at_period_end: true,
    });

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    await prisma.user.update({
      where: { clerkUserId },
      data: { isAutoRenewal: false },
    });

    res.json({ success: true, message: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
};

export const addPaymentHistory = async (req, res) => {
  const { clerkUserId, month, amount, type, date } = req.body;
  try {
    const payment = await prisma.payment.create({
      data: {
        clerkUserId,
        month,
        amount,
        type,
        date: new Date(date),
      },
    });
    res.json({ success: true, payment });
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞' });
  }
};

export const getPaymentHistory = async (req, res) => {
  const { clerkUserId } = req.query;

  if (!clerkUserId) {
    return res.status(400).json({ error: 'clerkUserId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  try {
    const payments = await prisma.payment.findMany({
      where: { clerkUserId },
      orderBy: { date: 'desc' },
    });

    res.json({ payments });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π' });
  }
};

export const renewAutoRenewal = async (req, res) => {
  const { clerkUserId } = req.body;
  try {
    const user = await prisma.user.findUnique({ where: { clerkUserId } });
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    if (user.isAutoRenewal) {
      return res.status(400).json({ error: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ' });
    }
    await prisma.user.update({
      where: { clerkUserId },
      data: { isAutoRenewal: true },
    });
    res.json({ success: true, message: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –≤–∫–ª—é—á–µ–Ω–æ.' });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è' });
  }
};

export const getStripePaymentHistory = async (req, res) => {
  const { clerkUserId, limit = 10, offset = 0 } = req.query;
  try {
    const user = await prisma.user.findUnique({ where: { clerkUserId } });
    if (!user) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    // –ü–æ–ª—É—á–∞–µ–º stripeCustomerId –∏–ª–∏ email
    const customerEmail = user.email;
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Stripe –ø–æ email (–µ—Å–ª–∏ –Ω–µ—Ç stripeCustomerId)
    let customerId = user.stripeCustomerId;
    if (!customerId) {
      // –ü–æ–∏—Å–∫ –ø–æ email
      const customers = await stripe.customers.list({ email: customerEmail, limit: 1 });
      if (customers.data.length > 0) {
        customerId = customers.data[0].id;
      }
    }
    if (!customerId) {
      return res.json({ payments: [], total: 0 });
    }
    // –ü–æ–ª—É—á–∞–µ–º invoices (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ charges, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const invoices = await stripe.invoices.list({
      customer: customerId,
      limit: Number(limit),
      starting_after: offset ? undefined : undefined // Stripe –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç offset, –Ω—É–∂–Ω–∞ —Å–≤–æ—è –ø–∞–≥–∏–Ω–∞—Ü–∏—è —á–µ—Ä–µ–∑ starting_after
    });
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã: —Ç–æ–ª—å–∫–æ limit, –±–µ–∑ offset (Stripe —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç keyset-–ø–∞–≥–∏–Ω–∞—Ü–∏—é)
    // –ú–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–∞–≥–∏–Ω–∞—Ü–∏—é —á–µ—Ä–µ–∑ last invoice id (starting_after)
    const payments = invoices.data.map(inv => ({
      id: inv.id,
      amount: inv.amount_paid / 100,
      currency: inv.currency,
      date: new Date(inv.created * 1000),
      status: inv.status,
      description: inv.description,
      period: inv.period_start ? new Date(inv.period_start * 1000) : null,
      type: inv.lines.data[0]?.description || 'Premium',
    }));
    res.json({ payments, total: invoices.data.length });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ Stripe:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ Stripe' });
  }
};
