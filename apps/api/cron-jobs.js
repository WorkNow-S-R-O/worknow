import cron from 'node-cron';
import stripe from './utils/stripe.js';
import nodemailer from 'nodemailer';
import pkg from '@prisma/client';
const { PrismaClient } = pkg;
import dotenv from 'dotenv';

dotenv.config();
const prisma = new PrismaClient();

// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
const transporter = nodemailer.createTransport({
  host: "smtp.gmail.com",
  port: 587,
  secure: false, // true –¥–ª—è 465, false –¥–ª—è 587
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const checkLowRankedJobs = async () => {
  console.log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∏–∑–∫–æ...");

  try {
    const jobsPerPage = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const minPage = 3; // –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –Ω–∞ 3-–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –Ω–∏–∂–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    const jobs = await prisma.job.findMany({
      include: {
        user: true,
      },
      orderBy: [
        { boostedAt: 'desc' },
        { createdAt: 'desc' },
      ],
    });

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    const pagedJobs = jobs.reduce((acc, job, index) => {
      const page = Math.floor(index / jobsPerPage) + 1;
      if (page >= minPage) {
        acc.push({ ...job, page });
      }
      return acc;
    }, []);

    console.log(`üì© –ì–æ—Ç–æ–≤–∏–º –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ ${pagedJobs.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...`);

    // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω–∞–¥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const usersToNotify = new Map();

    pagedJobs.forEach((job) => {
      if (job.user?.email) {
        if (!usersToNotify.has(job.user.email)) {
          usersToNotify.set(job.user.email, []);
        }
        usersToNotify.get(job.user.email).push(job);
      }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    for (const [email, jobs] of usersToNotify.entries()) {
      const jobTitles = jobs.map((j) => `- ${j.title} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${j.page})`).join('\n');
      
      const mailOptions = {
        from: `"Worknow Notifications" <${process.env.EMAIL_USER}>`,
        to: email,
        subject: '–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–ø—É—Å—Ç–∏–ª–∏—Å—å –≤–Ω–∏–∑',
        text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í–∞—à–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ–ø—É—Å—Ç–∏–ª–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${minPage} –∏–ª–∏ –Ω–∏–∂–µ:\n\n${jobTitles}\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–¥–Ω—è—Ç—å –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–∏–≤–ª–µ—á—å –±–æ–ª—å—à–µ –æ—Ç–∫–ª–∏–∫–æ–≤.\n\n–ü–æ–¥–Ω–∏–º–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–¥–µ—Å—å: https://worknowjob.com/my-advertisements\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –ö–æ–º–∞–Ω–¥–∞ Worknow.`,
      };

      await transporter.sendMail(mailOptions);
      console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${email}`);
    }

  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π:", error);
  }
};

export const cancelAutoRenewal = async (req, res) => {
  const { clerkUserId } = req.body;

  try {
    const user = await prisma.user.findUnique({
      where: { clerkUserId },
    });

    if (!user || !user.stripeSubscriptionId) {
      return res.status(404).json({ error: '–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    if (!user.isAutoRenewal) {
      return res.status(400).json({ error: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ' });
    }

    // üîπ –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤ Stripe
    await stripe.subscriptions.update(user.stripeSubscriptionId, {
      cancel_at_period_end: true,
    });

    // üîπ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
    await prisma.user.update({
      where: { clerkUserId },
      data: { isAutoRenewal: false },
    });

    // üîπ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    console.log(`üì© [DEBUG] –ì–æ—Ç–æ–≤–∏–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ –Ω–∞ ${user.email}`);


    const mailOptions = {
      from: `"Worknow" <${process.env.EMAIL_USER}>`,
      to: user.email,
      subject: "–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ",
      text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${user.firstName || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"}!\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏. –í–∞—à–∞ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ–π –¥–æ ${user.premiumEndsAt.toLocaleDateString()}.\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å Worknow!`,
    };

    await transporter.sendMail(mailOptions);
    console.log(`üì© –ü–∏—Å—å–º–æ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${user.email}`);

    res.json({ success: true, message: '–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.' });
  } catch (error) {
    console.error(' –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
  }
};

// –ó–∞–ø—É—Å–∫ cron-–∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00
cron.schedule('0 8 * * *', () => {
  console.log("‚è∞ –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π...");
  checkLowRankedJobs();
}, {
  timezone: "Europe/Moscow",
});

// –ö—Ä–æ–Ω-–∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞
const disableExpiredPremiums = async () => {
  try {
    const result = await prisma.user.updateMany({
      where: {
        isPremium: true,
        isAutoRenewal: false,
        premiumEndsAt: { lt: new Date() }
      },
      data: { isPremium: false }
    });
    if (result.count > 0) {
      console.log(`‚è∞ –û—Ç–∫–ª—é—á–µ–Ω–æ –ø—Ä–µ–º–∏—É–º–æ–≤: ${result.count}`);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–º–∏—É–º–∞:', error);
  }
};

// –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å
cron.schedule('0 * * * *', () => {
  console.log('‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø—Ä–µ–º–∏—É–º–æ–≤...');
  disableExpiredPremiums();
}, {
  timezone: 'Europe/Prague',
});

export { disableExpiredPremiums };
export { checkLowRankedJobs };
