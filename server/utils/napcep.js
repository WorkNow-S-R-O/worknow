import puppeteer from 'puppeteer';
import { PrismaClient } from '@prisma/client';
import { fakerRU as faker } from '@faker-js/faker';

const prisma = new PrismaClient();
const MAX_JOBS = 200;

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ —Ä–∞–±–æ—Ç—ã
const jobTitlesMap = [
    { keywords: ["—É–±–æ—Ä–∫–∞", "—á–∏—Å—Ç–∫–∞", "–º–æ–π–∫–∞"], title: "–£–±–æ—Ä—â–∏–∫" },
    { keywords: ["–æ—Ñ–∏—Ü–∏–∞–Ω—Ç", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–ø–æ–¥–∞—á–∞"], title: "–û—Ñ–∏—Ü–∏–∞–Ω—Ç" },
    { keywords: ["–≥—Ä—É–∑—á–∏–∫", "–ø–µ—Ä–µ–Ω–æ—Å–∫–∞", "—Å–∫–ª–∞–¥"], title: "–ì—Ä—É–∑—á–∏–∫" },
    { keywords: ["–≤–æ–¥–∏—Ç–µ–ª—å", "–¥–æ—Å—Ç–∞–≤–∫–∞", "–º–∞—à–∏–Ω–∞"], title: "–í–æ–¥–∏—Ç–µ–ª—å" },
    { keywords: ["–ø—Ä–æ–¥–∞–∂–∞", "–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "–º–∞–≥–∞–∑–∏–Ω"], title: "–ü—Ä–æ–¥–∞–≤–µ—Ü-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç" },
    { keywords: ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–≤–µ–±"], title: "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" },
    { keywords: ["–∫–∞—Å—Å–∞", "–∫–ª–∏–µ–Ω—Ç", "—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä"], title: "–ö–∞—Å—Å–∏—Ä" },
    { keywords: ["—Å–±–æ—Ä–∫–∞", "–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–∑–∞–≤–æ–¥"], title: "–†–∞–±–æ—á–∏–π –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ" },
];

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
function generateJobTitle(description) {
    for (const job of jobTitlesMap) {
        if (job.keywords.some(keyword => description.toLowerCase().includes(keyword))) {
            return job.title;
        }
    }
    return "–û–±—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è";
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –Ω–æ–≤—ã—Ö
async function clearOldData() {
    console.log("üóë –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ...");
    await prisma.job.deleteMany({});
    await prisma.user.deleteMany({
        where: { clerkUserId: { startsWith: "user_" } }
    });
    console.log("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!");
}

// –ü–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π —Å —Å–∞–π—Ç–∞
async function fetchJobDescriptions() {
    console.log("üîç –ó–∞–ø—É—Å–∫–∞–µ–º Puppeteer –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Orbita...");

    const browser = await puppeteer.launch({ headless: true, args: ['--no-sandbox', '--disable-setuid-sandbox'] });
    const page = await browser.newPage();
    await page.goto('https://doska.orbita.co.il/jobs/required/', { waitUntil: 'networkidle2' });

    let jobs = [];
    let currentPage = 1;

    while (jobs.length < MAX_JOBS) {
        console.log(`üìÑ –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É ${currentPage}...`);

        const newJobs = await page.evaluate(() => {
            const jobElements = document.querySelectorAll('.message');
            const jobData = [];

            jobElements.forEach((job) => {
                let description = job.querySelector('.information')?.innerText.trim() || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
                let title = job.querySelector('.caption .cap')?.innerText.trim() || null;
                let city = job.querySelector('.hidden-xs a')?.innerText.trim() || '–ù–µ —É–∫–∞–∑–∞–Ω';

                // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                let phoneMatch = description.match(/\+972[-\s]?\d{1,2}[-\s]?\d{3}[-\s]?\d{4,6}/);
                let phone = phoneMatch ? phoneMatch[0].replace(/\s+/g, '') : null;

                if (!title) {
                    title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è";
                }

                jobData.push({ title, description, city, phone });
            });

            return jobData;
        });

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–π –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        newJobs.forEach(job => {
            if (job.title === "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è") {
                job.title = generateJobTitle(job.description);
            }
        });

        jobs = [...jobs, ...newJobs];

        if (jobs.length >= MAX_JOBS) {
            console.log("‚úÖ –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏–π.");
            break;
        }

        // –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        const nextPageUrl = await page.evaluate(() => {
            const nextLink = Array.from(document.querySelectorAll('a')).find(a => a.title === "–°–ª–µ–¥—É—é—â–∞—è");
            return nextLink ? nextLink.href : null;
        });

        if (!nextPageUrl) {
            console.log("‚úÖ –ë–æ–ª—å—à–µ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ—Ç.");
            break;
        }

        // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        await page.goto(nextPageUrl, { waitUntil: 'networkidle2' });
        currentPage++;
    }

    await browser.close();
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${jobs.length} –≤–∞–∫–∞–Ω—Å–∏–π`);
    return jobs.slice(0, MAX_JOBS);
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π
async function createFakeUsersWithJobs(jobs) {
    console.log(`üë• –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏...`);

    const defaultCategory = await prisma.category.findUnique({
        where: { name: '–†–∞–∑–Ω–æ–µ' },
    });

    if (!defaultCategory) {
        console.error('‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è "–†–∞–∑–Ω–æ–µ" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ `prisma db seed`');
        return;
    }

    for (const job of jobs) {
        const city = await prisma.city.findUnique({ where: { name: job.city } });

        if (!city) {
            console.log(`‚ö†Ô∏è –ì–æ—Ä–æ–¥ "${job.city}" –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é.`);
            continue;
        }

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—É—Å—Å–∫–æ-–µ–≤—Ä–µ–π—Å–∫–∏—Ö –∏–º–µ–Ω
        const firstName = Math.random() < 0.5 ? faker.person.firstName() : faker.helpers.arrayElement([
            "–ê–≤—Ä–∞–∞–º", "–ò—Ü—Ö–∞–∫", "–Ø–∫–æ–≤", "–ú–æ—à–µ", "–®–ª–æ–º–æ", "–î–∞–≤–∏–¥", "–≠–ª–∏—ç–∑–µ—Ä", "–ú–µ–Ω–∞—Ö–µ–º", "–ò–µ—Ö—É–¥–∞", "–®–∏–º–æ–Ω",
            "–°–∞—Ä–∞", "–†–∞—Ö–µ–ª—å", "–õ–µ—è", "–ú–∏—Ä–∏–∞–º", "–•–∞–Ω–∞", "–ë–∞—Ç—à–µ–≤–∞", "–ê–¥–∞", "–≠—Å—Ç–µ—Ä", "–¢–∞–º–∞—Ä", "–ù–∞–æ–º–∏"
        ]);
        const lastName = faker.person.lastName();
        const email = faker.internet.email({ firstName, lastName });

        const clerkUserId = `user_${faker.string.uuid()}`;

        // ‚úÖ –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞–π–¥–µ–Ω –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –±–µ—Ä–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
        const phone = job.phone || `+972-${faker.number.int({ min: 50, max: 59 })}-${faker.number.int({ min: 1000000, max: 9999999 })}`;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã
        const salary = `${faker.number.int({ min: 35, max: 50 })}`;

        // üü¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –∞–≤–∞—Ç–∞—Ä–∫–∏ —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
        const initials = `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase();
        const imageUrl = `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=random&color=fff&size=128`;

        await prisma.user.create({
            data: {
                clerkUserId,
                firstName,
                lastName,
                email,
                imageUrl, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É —Å –∏–Ω–∏—Ü–∏–∞–ª–∞–º–∏
                jobs: {
                    create: {
                        title: job.title,
                        description: job.description,
                        salary: salary,
                        phone: phone,
                        city: { connect: { id: city.id } },
                        category: { connect: { id: defaultCategory.id } },
                    },
                },
            },
        });
    }

    console.log("üéâ –í—Å–µ —Ñ–µ–π–∫–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!");
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    await clearOldData();
    const jobs = await fetchJobDescriptions();
    await createFakeUsersWithJobs(jobs);
}

main().catch(console.error).finally(() => prisma.$disconnect());
