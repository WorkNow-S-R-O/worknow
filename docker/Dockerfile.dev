# --- Stage 1: Build frontend ---
FROM node:20-alpine AS frontend-build
WORKDIR /app

# Install dependencies for build
RUN apk add --no-cache python3 make g++

COPY ../package.json ../package-lock.json ./
RUN npm ci --ignore-scripts

# Copy frontend files
COPY ../apps/client ./apps/client
COPY ../public ./public
COPY ../vite.config.js ./
COPY ../tailwind.config.js ./
COPY ../libs ./libs
COPY ../postcss.config.js ./
COPY ../tsconfig.json ./
COPY ../tsconfig.app.json ./

# Copy environment files for frontend build
COPY ../.env.local ./.env.local

# Set environment variables for build
ARG VITE_CLERK_PUBLISHABLE_KEY
ARG VITE_API_URL
ARG VITE_STRIPE_PUBLISHABLE_KEY

ENV VITE_CLERK_PUBLISHABLE_KEY=$VITE_CLERK_PUBLISHABLE_KEY
ENV VITE_API_URL=$VITE_API_URL
ENV VITE_STRIPE_PUBLISHABLE_KEY=$VITE_STRIPE_PUBLISHABLE_KEY

# Build the frontend
WORKDIR /app/apps/client
RUN npm run build

# --- Stage 2: Prepare backend (no build needed) ---
FROM node:20-alpine AS backend-build
WORKDIR /app

# Install OpenSSL and other dependencies
RUN apk add --no-cache openssl

COPY ../package.json ../package-lock.json ./
RUN npm ci --ignore-scripts
COPY ../apps/api ./apps/api
COPY ../prisma ./prisma
COPY ../tsconfig.server.json ./

# --- Stage 3: Production image ---
FROM node:20-alpine AS production
WORKDIR /app
ENV NODE_ENV=development

# Install OpenSSL and other dependencies for Prisma
RUN apk add --no-cache openssl

# Install only production dependencies
COPY ../package.json ../package-lock.json ./
RUN npm ci --only=production --ignore-scripts

# Copy built frontend
COPY --from=frontend-build /app/apps/client/dist ./dist
# Copy backend source
COPY --from=backend-build /app/apps/api ./apps/api
COPY --from=backend-build /app/prisma ./prisma
COPY --from=backend-build /app/tsconfig.server.json ./

# Prisma: generate client
RUN npx prisma generate

# Copy any other needed files (e.g., static assets)
COPY ../public ./public

# Copy startup script
COPY ./start.sh ./start.sh
RUN chmod +x ./start.sh

# Use a non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nodejs -u 1001
USER nodejs

# Expose Express port
EXPOSE 3001

# Start the server with database seeding
CMD ["./start.sh"] 