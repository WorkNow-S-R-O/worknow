# Production Dockerfile for WorkNow
# Multi-stage build for optimized production image

# Stage 1: Build frontend
FROM node:20-alpine AS frontend-builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY apps/client/package*.json ./apps/client/
COPY vite.config.js ./
COPY tailwind.config.js ./
COPY postcss.config.js ./

# Copy Prisma schema for postinstall script
COPY prisma/ ./prisma/

# Install all dependencies (including dev dependencies needed for build)
RUN npm ci

# Copy frontend source
COPY apps/client/ ./apps/client/
COPY public/ ./public/
COPY libs/ ./libs/

# Set Docker build environment variable
ENV DOCKER_BUILD=true

# Build frontend (Vite config expects to be run from root with apps/client as root)
RUN npm run build

# Stage 2: Build backend
FROM node:20-alpine AS backend-builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY apps/api/package*.json ./apps/api/

# Copy Prisma schema for postinstall script
COPY prisma/ ./prisma/

# Install all dependencies (including dev dependencies needed for Prisma)
RUN npm ci

# Copy backend source
COPY apps/api/ ./apps/api/
COPY libs/ ./libs/

# Generate Prisma client
RUN npx prisma generate

# Stage 3: Production runtime
FROM node:20-alpine AS production

# Add metadata labels for GitHub Container Registry
LABEL org.opencontainers.image.source=https://github.com/WorkNow-S-R-O/worknow
LABEL org.opencontainers.image.description="WorkNow is a platform that helps employers find employees and job seekers find work. It allows users to post job listings, browse job offers, and contact employers."
LABEL org.opencontainers.image.licenses=MIT

# Install necessary packages
RUN apk add --no-cache \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create app user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S worknow -u 1001

WORKDIR /app

# Copy built frontend from frontend-builder (correct path: apps/client/dist)
COPY --from=frontend-builder --chown=worknow:nodejs /app/apps/client/dist ./dist

# Copy backend from backend-builder
COPY --from=backend-builder --chown=worknow:nodejs /app/node_modules ./node_modules
COPY --from=backend-builder --chown=worknow:nodejs /app/apps/api ./apps/api
COPY --from=backend-builder --chown=worknow:nodejs /app/prisma ./prisma
COPY --from=backend-builder --chown=worknow:nodejs /app/libs ./libs
COPY --from=backend-builder --chown=worknow:nodejs /app/package*.json ./

# Copy public assets
COPY --chown=worknow:nodejs public/ ./public/

# Create necessary directories
RUN chown -R worknow:nodejs /app

# Switch to non-root user
USER worknow

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })" || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "apps/api/index.js"] 