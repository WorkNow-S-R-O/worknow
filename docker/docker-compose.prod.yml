# Docker Compose Production Configuration

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: worknow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: worknow
      POSTGRES_USER: worknow
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-worknow_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - worknow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U worknow -d worknow"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: worknow-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - worknow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # WorkNow Application
  worknow:
    build:
      context: ..
      dockerfile: docker/Dockerfile.prod
    container_name: worknow-app
    restart: unless-stopped
    environment:
      # Database
      DATABASE_URL: postgresql://worknow:${POSTGRES_PASSWORD:-worknow_password}@postgres:5432/worknow
      
      # Node environment
      NODE_ENV: production
      PORT: 3001
      
      # Clerk Authentication
      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      
      # Email
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASS: ${EMAIL_PASS}
      
      # AWS S3
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379
      
      # Application
      VITE_CLERK_PUBLISHABLE_KEY: ${VITE_CLERK_PUBLISHABLE_KEY}
      VITE_API_URL: ${VITE_API_URL}
      VITE_STRIPE_PUBLISHABLE_KEY: ${VITE_STRIPE_PUBLISHABLE_KEY}
    ports:
      - "3001:3001"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - worknow-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: worknow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - worknow
    networks:
      - worknow-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  worknow-network:
    driver: bridge 