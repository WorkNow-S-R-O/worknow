name: Optimized Docker Build

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: worknow-s-r-o/worknow

jobs:
  # Build optimized Docker images
  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        target: [frontend, backend, production]

    outputs:
      frontend-digest: ${{ steps.frontend.outputs.digest }}
      backend-digest: ${{ steps.backend.outputs.digest }}
      production-digest: ${{ steps.production.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.5
            network=host

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=semver,pattern={{version}}
            type=sha,prefix=sha-
            type=raw,value=${{ github.sha }}

      # Build frontend image
      - name: Build frontend image
        id: frontend
        if: matrix.target == 'frontend'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=frontend
          # cache-to: type=gha,mode=max,scope=frontend  # Disabled due to GitHub Actions Cache service issues
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Build backend image
      - name: Build backend image
        id: backend
        if: matrix.target == 'backend'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend
          # cache-to: type=gha,mode=max,scope=backend  # Disabled due to GitHub Actions Cache service issues
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      # Build production image
      - name: Build production image
        id: production
        if: matrix.target == 'production'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=production
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache
          # cache-to: type=gha,mode=max,scope=production  # Disabled due to GitHub Actions Cache service issues
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            FRONTEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.meta.outputs.tags }}
            BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:${{ steps.meta.outputs.tags }}

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  # Image optimization analysis
  image-analysis:
    runs-on: ubuntu-latest
    needs: build-images

    steps:
      - name: Analyze image size
        run: |
          # Pull and analyze the built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

          # Get image size
          IMAGE_SIZE=$(docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --format "table {{.Size}}")
          echo "Image size: $IMAGE_SIZE"

          # Analyze layers
          docker history ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --no-trunc

          # Check for large files
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            wagoodman/dive:latest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} \
            --ci --lowestEfficiency 0.8 || echo "Dive analysis completed"

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: build-images
    if: always() && needs.build-images.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run container performance tests
        run: |
          # Start the container
          docker run -d --name worknow-test \
            -p 3001:3001 \
            -e NODE_ENV=test \
            -e DATABASE_URL="postgresql://test:test@localhost:5432/test" \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            
          # Wait for container to start
          sleep 30

          # Run basic performance tests
          curl -w "@curl-format.txt" -o /dev/null -s "http://localhost:3001/api/health" || echo "Health check failed"

          # Memory usage
          docker stats worknow-test --no-stream --format "table {{.MemUsage}}"

          # CPU usage
          docker stats worknow-test --no-stream --format "table {{.CPUPerc}}"

          # Cleanup
          docker stop worknow-test
          docker rm worknow-test

      - name: Create curl format file
        run: |
          cat > curl-format.txt << EOF
          time_namelookup:  %{time_namelookup}\n
          time_connect:     %{time_connect}\n
          time_appconnect:  %{time_appconnect}\n
          time_pretransfer: %{time_pretransfer}\n
          time_redirect:    %{time_redirect}\n
          time_starttransfer: %{time_starttransfer}\n
          ----------\n
          time_total:       %{time_total}\n
          EOF

  # Cleanup old images
  cleanup:
    runs-on: ubuntu-latest
    needs: [build-images, security-scan, image-analysis]
    if: always()

    steps:
      - name: Clean up old images
        run: |
          # Keep only the last 10 images
          docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Repository}}:{{.Tag}}" | \
            tail -n +11 | \
            xargs -r docker rmi || echo "No old images to clean up"
