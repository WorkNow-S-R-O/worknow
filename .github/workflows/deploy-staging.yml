name: Deploy to Staging

on:
  push:
    branches: [develop, staging]
  pull_request:
    branches: [master]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/worknow

jobs:
  # Build staging image
  build-staging:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      pr-number: ${{ steps.pr-meta.outputs.number }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract PR metadata
      id: pr-meta
      if: github.event_name == 'pull_request'
      run: |
        echo "number=${{ github.event.number }}" >> $GITHUB_OUTPUT
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr,prefix=pr-
          type=sha,prefix=sha-
          
    - name: Build and push staging image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-staging
    environment: staging
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          # Create staging environment
          export IMAGE_TAG=${{ needs.build-staging.outputs.image-tag }}
          export PR_NUMBER=${{ needs.build-staging.outputs.pr-number }}
          
          # For PR deployments, create isolated environment
          if [ ! -z "$PR_NUMBER" ]; then
            export COMPOSE_PROJECT_NAME="worknow-pr-$PR_NUMBER"
            export STAGING_PORT=$((8000 + PR_NUMBER))
          else
            export COMPOSE_PROJECT_NAME="worknow-staging"
            export STAGING_PORT=8000
          fi
          
          # Update environment variables for staging
          cat > .env.staging << EOF
          NODE_ENV=staging
          DATABASE_URL=${{ secrets.STAGING_DATABASE_URL }}
          REDIS_URL=${{ secrets.STAGING_REDIS_URL }}
          CLERK_SECRET_KEY=${{ secrets.STAGING_CLERK_SECRET_KEY }}
          WEBHOOK_SECRET=${{ secrets.STAGING_WEBHOOK_SECRET }}
          STRIPE_SECRET_KEY=${{ secrets.STAGING_STRIPE_SECRET_KEY }}
          EMAIL_USER=${{ secrets.STAGING_EMAIL_USER }}
          EMAIL_PASS=${{ secrets.STAGING_EMAIL_PASS }}
          VITE_CLERK_PUBLISHABLE_KEY=${{ secrets.STAGING_VITE_CLERK_PUBLISHABLE_KEY }}
          VITE_API_URL=${{ secrets.STAGING_VITE_API_URL }}
          VITE_STRIPE_PUBLISHABLE_KEY=${{ secrets.STAGING_VITE_STRIPE_PUBLISHABLE_KEY }}
          PORT=$STAGING_PORT
          EOF
          
          # Deploy staging environment
          docker-compose -f docker/docker-compose.staging.yml --env-file .env.staging up -d
          
    - name: Run staging tests
      run: |
        sleep 30
        STAGING_URL="http://${{ secrets.STAGING_HOST }}:$STAGING_PORT"
        curl -f $STAGING_URL/api/health || exit 1
        
        # Run smoke tests
        npm run test:staging -- --baseURL=$STAGING_URL
        
    - name: Comment PR with staging URL
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = ${{ needs.build-staging.outputs.pr-number }};
          const stagingPort = 8000 + prNumber;
          const stagingUrl = `http://${{ secrets.STAGING_HOST }}:${stagingPort}`;
          
          github.rest.issues.createComment({
            issue_number: prNumber,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ğŸš€ **Staging deployment ready!**
            
            **Staging URL:** ${stagingUrl}
            
            **What's deployed:**
            - Branch: \`${context.payload.pull_request.head.ref}\`
            - Commit: \`${context.payload.pull_request.head.sha.substring(0, 7)}\`
            - Image: \`${{ needs.build-staging.outputs.image-tag }}\`
            
            **Test the deployment:**
            - [ ] Health check: ${stagingUrl}/api/health
            - [ ] Frontend: ${stagingUrl}
            - [ ] Authentication flow
            - [ ] Job creation/editing
            - [ ] Payment flow (test mode)
            
            This staging environment will be automatically cleaned up when the PR is closed.`
          });

  # Cleanup PR environments
  cleanup-pr:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    environment: staging
    
    steps:
    - name: Cleanup PR environment
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          export PR_NUMBER=${{ github.event.number }}
          export COMPOSE_PROJECT_NAME="worknow-pr-$PR_NUMBER"
          
          # Stop and remove PR environment
          docker-compose -f docker/docker-compose.staging.yml down -v
          
          # Clean up images
          docker image prune -f

