name: Deploy to Production

on:
  push:
    branches: [master]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: worknow-s-r-o/worknow

jobs:
  # Build and test
  build-and-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr,prefix=pr-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix=sha-

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.prod
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Database migration
  migrate-database:
    runs-on: ubuntu-latest
    needs: build-and-test
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run database migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify database connection
        run: npx prisma db push --accept-data-loss
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Deploy to production
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, migrate-database]
    environment: production
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Pull latest image
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-test.outputs.image-tag }}

            # Update docker-compose with new image
            export IMAGE_TAG=${{ needs.build-and-test.outputs.image-tag }}
            envsubst < docker-compose.prod.yml > docker-compose.prod.current.yml

            # Deploy with zero downtime
            docker-compose -f docker-compose.prod.current.yml up -d --no-deps worknow

            # Clean up old images
            docker image prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f ${{ secrets.PRODUCTION_URL }}/api/health || exit 1

      - name: Send deployment success email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "WorkNow Production Deployment Success"
          to: peterbaikov12@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            üöÄ WorkNow Production Deployment Successful!

            Environment: Production
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Deployed at: $(date)
            Image Tag: ${{ needs.build-and-test.outputs.image-tag }}

            The production deployment has been completed successfully.
            Health check passed.

            Best regards,
            WorkNow CI/CD System

  # Rollback job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name == 'workflow_dispatch'
    environment: production

    steps:
      - name: Rollback to previous version
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            # Rollback to previous working image
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d

      - name: Send rollback email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "WorkNow Production Rollback Completed"
          to: peterbaikov12@gmail.com
          from: ${{ secrets.EMAIL_USERNAME }}
          body: |
            ‚ö†Ô∏è WorkNow Production Rollback Completed!

            Environment: Production
            Commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
            Rolled back at: $(date)

            The production deployment has been rolled back to the previous version.
            Please check the system status.

            Best regards,
            WorkNow CI/CD System
