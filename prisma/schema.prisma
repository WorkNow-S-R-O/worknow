generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  clerkUserId          String    @unique
  firstName            String?
  imageUrl             String?
  isAutoRenewal        Boolean   @default(true)
  isPremium            Boolean   @default(false)
  lastName             String?
  premiumEndsAt        DateTime?
  stripeSubscriptionId String?
  premiumDeluxe         Boolean   @default(false)
  isAdmin               Boolean   @default(false)
  jobs                 Job[]
}

model City {
  id   Int    @id @default(autoincrement())
  name String @unique
  jobs Job[]
  translations CityTranslation[]
}

model CityTranslation {
  id      Int    @id @default(autoincrement())
  city    City   @relation(fields: [cityId], references: [id])
  cityId  Int
  lang    String // 'ru', 'he', 'en'
  name    String
  @@unique([cityId, lang])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique
  jobs Job[]
  translations CategoryTranslation[]
}

model CategoryTranslation {
  id         Int      @id @default(autoincrement())
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  lang       String   // 'ru', 'he', 'en'
  name       String
  @@unique([categoryId, lang])
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String
  salary      String
  phone       String
  description String
  cityId      Int
  userId      String
  categoryId  Int
  createdAt   DateTime  @default(now())
  boostedAt   DateTime?
  city        City      @relation(fields: [cityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  shuttle     Boolean?  // Подвозка
  meals       Boolean?  // Питание

  @@index([boostedAt])
}

model Seeker {
  id          Int      @id @default(autoincrement())
  name        String
  contact     String   // скрытый контакт (телефон/email/social)
  city        String
  description String
  slug        String?  @unique
  isActive    Boolean  @default(true)
  isDemanded  Boolean  @default(false)
  createdAt   DateTime @default(now())
  gender      String?
  facebook    String?
  languages   String[]
  nativeLanguage String?
  employment  String?
  category    String?
  documents   String?
  note        String?
  announcement String?
  documentType String?
}

model Message {
  id          String   @id @default(uuid())
  clerkUserId String
  title       String
  body        String
  isRead      Boolean  @default(false)
  type        String   // 'system' | 'admin'
  fromAdminId String?
  createdAt   DateTime @default(now())
}
