generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String    @id @default(uuid())
  email                String    @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  clerkUserId          String    @unique
  firstName            String?
  imageUrl             String?
  isAutoRenewal        Boolean   @default(true)
  isPremium            Boolean   @default(false)
  lastName             String?
  premiumEndsAt        DateTime?
  stripeSubscriptionId String?
  premiumDeluxe        Boolean   @default(false)
  isAdmin              Boolean   @default(false)
  jobs                 Job[]
}

model City {
  id           Int               @id @default(autoincrement())
  name         String            @unique
  translations CityTranslation[]
  jobs         Job[]
}

model CityTranslation {
  id     Int    @id @default(autoincrement())
  cityId Int
  lang   String
  name   String
  city   City   @relation(fields: [cityId], references: [id])

  @@unique([cityId, lang])
}

model Category {
  id           Int                   @id @default(autoincrement())
  name         String                @unique
  translations CategoryTranslation[]
  jobs         Job[]
}

model CategoryTranslation {
  id         Int      @id @default(autoincrement())
  categoryId Int
  lang       String
  name       String
  category   Category @relation(fields: [categoryId], references: [id])

  @@unique([categoryId, lang])
}

model Job {
  id          Int       @id @default(autoincrement())
  title       String
  salary      String
  phone       String
  description String
  cityId      Int
  userId      String
  categoryId  Int
  createdAt   DateTime  @default(now())
  boostedAt   DateTime?
  meals       Boolean?
  shuttle     Boolean?
  imageUrl    String?
  category    Category  @relation(fields: [categoryId], references: [id])
  city        City      @relation(fields: [cityId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([boostedAt])
}

model Seeker {
  id             Int      @id @default(autoincrement())
  name           String
  contact        String
  city           String
  description    String
  slug           String?  @unique
  isActive       Boolean  @default(true)
  isDemanded     Boolean  @default(false)
  createdAt      DateTime @default(now())
  gender         String?
  facebook       String?
  languages      String[]
  nativeLanguage String?
  employment     String?
  category       String?
  documents      String?
  note           String?
  announcement   String?
  documentType   String?
}

model Message {
  id          String   @id @default(uuid())
  clerkUserId String
  title       String
  body        String
  isRead      Boolean  @default(false)
  type        String
  fromAdminId String?
  createdAt   DateTime @default(now())
}

model Payment {
  id          Int      @id @default(autoincrement())
  clerkUserId String
  month       String?
  amount      Int
  type        Int
  date        DateTime
}

model NewsletterSubscriber {
  id                     Int      @id @default(autoincrement())
  email                  String   @unique
  firstName              String?
  lastName               String?
  isActive               Boolean  @default(true)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  language               String   @default("ru")
  preferences            Json?
  onlyDemanded           Boolean  @default(false)
  preferredCategories    String[] @default([])
  preferredCities        String[] @default([])
  preferredDocumentTypes String[] @default([])
  preferredEmployment    String[] @default([])
  preferredGender        String?
  preferredLanguages     String[] @default([])
}

model NewsletterVerification {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
}
